[
  "Well-defined standards",
  "a native csscomb support",
  "standartisation",
  "Styling form inputs and checkboxes is still tedious. A parent selector would be nifty. Out-of-the-box height 100% that expands the element to the height of its parent WITHOUT needing a harcoded parent, absolute positioning, or passing 100% height down all the way from <html>.\n\nSmall potatoes, but there you have it!",
  "container queries",
  "reading-distance",
  "Form styling",
  "native flow control",
  "Simple loops",
  "      ",
  "A more reasonable system regarding layout. Also variables and conditional styles. It seems this is now becoming a reality, but it took a very long time.",
  "Scoped styles",
  " ",
  "container queries",
  "automatic responsive layout",
  "Nesting blocks, single source of truth. No webkit or Moz anymore!!",
  "нативная вложенность классов",
  "accessibility features on how things are read by screen readers. Things like tone of voice, pronounciation, etc.",
  "polyfils",
  "Unified support of features, having different browsers implement things differently causes inconsistencies.",
  "I'm honestly very happy with the language itself at this point - can't think of anything I feel is missing. Things I think are missing from the ecosystem:\n\n- More CSS-based tools for high-quality print design and production\n- More consistency in implementation across browsers? (Although we're getting there now that IE is deprecated, and there are probably limits to how far we can ever achieve this...)",
  "A really good CSS-in-JS library. Stylex from Facebook looks good.",
  "nesting like in sass",
  "vertical align on any block element (that does what everyone think something labelled vertial-align does)",
  "I feel like 80% of what can be found in SCSS should be included in vanilla CSS.",
  "ease of use, programmer friendly",
  "Lack of unified behavior. What I mean is that when I write margin: 10px, it will be 10px i EVERY browser (example exagerated of course).",
  "Cant be conditional off of parents.",
  "Scoping, container media queries",
  "Parent selector working similarly to JS framework ones.",
  "gpu accelerated svg transforms",
  "Tooling around usage and code cleanup (removal of unused css). I believe the tooling exists, it just isn't pervasively used (unlike tree-shaking in javascript). I also like to know what is impacted by my css changes in my application. I can usually get that information, but it requires a lot of tooling around test automation.",
  "Container queries!",
  "Subgrid can't get here fast enough! Also would like to see native support for things that SASS offers - more dynamic programming-like features.",
  "Browser wars, but it's better than 15 years ago",
  "nested selector",
  "Specificity conflict rules warnings",
  "better structure, reusability",
  "Container Queries",
  "Proper abstractions to map on JS data structures",
  "There was something, but I don't remember now. Most of cases, there's only a partial support of features in browsers.",
  "OOTB CSS lighten and darken of colors",
  "A parent selector",
  "Respect for how complicated it can be",
  "font-size-adjust, line-height-step, subgrid, conic-gradient, backdrop-filter, @property --custom-property {}",
  "container queries ",
  "element queries",
  "Scrollbar properties; more compatibility between different browsers (I know, not a CSS problem...)",
  "Logic",
  "Element queries",
  "killing IE11 ASAP",
  "Color modification functions, conditionals, nesting ",
  "more math functions.. floor() round() etc.",
  "Always show Scrollbars",
  "sub-grid in allen gängigen Browsern\neinfaches skaling system für große Bildschrime (4k)",
  ":contains still isn't supported",
  "Forma sencilla de personalizar los radio buttons y checkbox, así como del input de tipo file, ",
  "parent selector",
  "Better text alignment. Read about a new potential spec that would allow you to make a text's bounding box be around it's x-height, baseline, or cap height. This would allow for exact margin spacing around text elements. ",
  "Better styling for form elements. Subgrid.",
  "Nesting selectors like in SCSS.",
  "Custom selectors. Selector nesting. Extend selectors. Module import css.",
  "Native Sass functionality like functions/mixins",
  "The class system feels outdated. Having to come up with a name for every single element just to style it seems crazy, hence the trend towards utility-first and inline styles.",
  "A way to traverse the DOM and target parent(s), siblings etc",
  "Child to parent selectors",
  "Full support for CSS Logical Properties (for all types). Include responsive media rule with logical sizes, and logical shorthand support.",
  "If statements...",
  "Parent selector ;)",
  "Parent selector (to style the parent of an element)",
  "nesting!",
  "I would want it to work more like a design/prototyping tool. Less code please.",
  "Being able to full style native components in the browser. I'm sick of writing a custom components lib for every company I join. Using existing frameworks is also painful, because they might not support every feature we need. I just want to style native components, which have all important logic implemented and they work with A11Y.",
  "Visual support in the browsers to besser see what we do. This thing is helpful: https://visbug.web.app/\nI am a Desktop Publisher (1995), I function by seeing what I do. I would not know what happens, if the debugger could not pause. :)",
  "backward sibling selector",
  "Subgrids ",
  "container queries",
  "More complicated layout tooling. Easier to style things like background animations on single elements (e.g. links) without having to use before/after pseudo elements or complicated \"hacks\" to achieve a small thing.",
  "Ability to get and use width or height of the element inside its selector. (for example: div {height: calc(width + 10)})",
  "Container queries\n",
  "Improved sticky functionality (sticky from position:absolute, select containing block).\nAnimations with scroll as timeline.",
  "IE11 to finally kick the bucket :D",
  "Plus de typographie ",
  "Element queries",
  "Container/Element queries. Parent selectors.",
  "scroll-padding-inline-start",
  "nesting should be in the official spec",
  "Consensus, lots of different implementations, standards, frameworks, etc.",
  "Tree-shaking/automatic optimisation tools compared to HTML",
  ":contains() selector",
  "CSS could be a bit more smart and should offer more functions like color manipulation (darken, lighten, ...) and should be able to read data attributes more easily.",
  "Need to be able to style the native widgets without using faux components",
  "Pseudo elemento para o ancestral.",
  "We need the god damn line trim properties asap :>",
  "Something to chop off the top-most and bottom-most leading from text nodes",
  "Functions and Mixins in Sass",
  "More use cases to replace certain JS functions to speed up page load. Over time, CSS has replaced the need for some JS and it's performance benefits are great",
  "if, color-functions, sass like mixins",
  ":has() support",
  "Advanced typography inspired by InDesign",
  "Eine bessere Implementierung von :not bzw. Erweiterung (if Bedingungen)",
  "Selecting a parent item by it's children (i.e., look for child with class .foo, and select it's parent) ",
  "strict mode, and more polyfills so people can write \"modern\" CSS ",
  "get attributes values to use directly in scss",
  "parent selectors",
  "Container queries (actually they might already exist in some form...)",
  "container queries\nstyle parent based on the amount of children ",
  "Parent selector",
  "- Implementation of the `lh` and `rlh` units \n- Implementation of the whole CSS Generated Content Module Level 3 spec in browsers\n- Implementation of the clone value of the box-decoration property in multi-columns layouts and when printing\n- Implementation of the `:target-within` selector\n- The `::contents` pseudo-element (https://github.com/w3c/csswg-drafts/issues/2406)\n- The `:has()` selector in stylesheets\n- More control on `::marker` pseudo-elements (notably positioning)\n- The `attr()` function anywhere",
  "Everything that modern pre-processors have to offer. ",
  "Although very unlikely, some browser CSS consistency.",
  "Ways to disable platform specific features without hacking. For example iOS phone bounce.",
  "element queries\nstyle scoping",
  "Debería tener más reglas relacionadas con JavaScript nativo, y más soporte en todos los navegadores de las features nuevas que se han preguntado precedentemente.",
  "I would like people to actually start using Shadow DOM",
  "The bar for entry should be lowering, technological advances are supposed to be easier. It is not. ",
  "container queries",
  "parent style according to child's state \nbad example: .parent checkbox::checked -> .parent {} etc.",
  "Container queries, easier and more concise web accessibility controls in CSS",
  "Container queries",
  "Sound/audio, selector queries",
  "Container queries",
  "a tool that is able to suggest/track specificity of selectors in an eslint-like manner",
  "Appreciation by JS devs of its fundamental beauty and simplicity",
  "Native nesting without selectors, more like pre-processors already does. I also would like a native way to pass props without JavaScript, like Styled-Components does. And a easy way to set native media-queries, like a `below(600px)` function instead of that huge `@media (max-width: 600px)`. Always making the native more powerful to not need tools.",
  "I would like to see :has widely adopted by browsers.",
  "- Customise form elements.\n- CSS region\n- CSS Nesting (100%)\n",
  "fluid responsiveness, ways to create layout without having to specify media queries for specific viewports sizes",
  "More intuitive animations",
  "Tooling at the level of IntelliSense / TypeScript. I want my editor to fully understand CSS like it understands other programming languages",
  "All ones that u can't use because Voldemort browser exist.",
  "more consistency across platforms/browsers",
  "Je ne sais pas si c'est moi qui suis à la ramasse, mais j'ai toujours du mal à trouver comment définir une hauteur de 100% de l'écran",
  "Better integration of some Preprocessor concepts (Sass)",
  "Standards. Too many ways to do the same thing. Not enough discoverability of the right way to do things.",
  "reverse selectors",
  "Native browser support for hyphenation.",
  "1px",
  "Псевдо-селектор родителя .element:parent(.red-parent) { color: red; }",
  "nesting, pure color functions",
  "Parent selectors",
  "Broad support for Houdini. The ability to polyfill or transpile JS has really made JS flourish, but the ability to \"polyfill\" CSS features I think will not only empower developers to push CSS, but will also provide more feedback for the CSSWG specification authors.",
  "100% support in all modern browsers. ",
  "Subgrids in Chrome",
  "Equal support across browsers",
  "Browser support of all these fancy features from this list xD",
  "previous sibling selector, and Selectors Level 4\n",
  "Everything that houdini promised and easier animations",
  "element queries, parent selector",
  "Element queries, nesting like SASS, mixins like SASS. \n\nThe community needs to start acknowledging that the C (CSS) is largly defunct in modern web apps (CSS-in-JS & BEM) and the last S is also no more. We no longer write \"Sheets\" of styles. This leaves just the \"Styles\" which are now part of our scoped components. \n\nI'm also seeing more and more \"behavour / functionality\" type features making it into \"CSS\", which is great. However this isn't what it was for hence why I think the community should look to refeer to CSS as something else. It's evolving way past it's original intention.\n\nIn terms of my general happyness with web technologies, I'm quite unhappy how complicated things have become. Theres too many \"new\" JS libraries, too many complicated build runners. If you pick one library its the \"previous best thing\" 6 months down the line. The industry really doesn't know what it wants when theres sooo much choice around.",
  "subgrid!",
  "Harmony, IE 11 still alive.",
  "Logical property shorthands in chrome",
  "3D Engine",
  "Warnings and Error messages",
  "Developers who know how to write it instead of inventing new ways around it.",
  "Faster browser adaptations of new standards. Flex and Grid took forever",
  "More robust animation functions like timing and call-backs.",
  "The ability to disable cascading (dependence of the style priority on the type of selector)\nOr add the ability to manually set the style priorities.\n\nCSS properties for adjusting the height, width, vertical shift of fonts, for easier font replacement throughout the site",
  "Stability for browsers to catch up in support",
  "element media queries\n",
  "Masonry-style grids with pure CSS but I just learned that this is something that is being worked on.",
  "Container queries.\nAble to reference other property values in the same selector block. For example: width: calc({height} / 2);\nBetter animation keyframe support.\nNesting.\nColor functions.",
  "More details from the css",
  "container queries!",
  "Very often I am writing css in scss files so anything that comes with scss is very much missing for me in basic css.\nMixins, @each and clear way to define variables instead of having them in :root{}",
  "I would like to built in animations, rather than having to assemble them from scratch.  Something similar to CSS Grid would be really nice! Since you could do floats and such in the past to get a grid layout. But being able to just say Grid!",
  "Css native mixins & functions.",
  "Parent selector",
  "Better debugging tools. Something similar to eslint for the style would be amazing",
  "Being able to traverse the dom tree more easily- eg. getting parent/grandparent elements",
  "Container queries",
  "nesting",
  "media queries for individual elements",
  "Scoping\nBreakpoints tied to a specific element/region, not just the screen size",
  "container queries",
  "Easy collapse (height) animation. For example from auto to zero and backwards",
  "More gap control (flexbox gap/grid gap will help a lot, but it's be good to have a block-gap and perhaps even inline-gap?)",
  "deeper ancestor targeting from a descendent element",
  "Some built in way to scope CSS. Large projects simply cannot depend on managing the cascade on their own. ",
  "nested selectors",
  "parent selector",
  "A way to select parent elements",
  "ability to target ancestor elements of a selector",
  "if/else or use preprocessors",
  "would love to see transition also works on display property change",
  "A gatekeeper to limit the amount of nonsense created in the CSS world (that this survey asks about a lot).",
  "Container Queries",
  "Totally form styling",
  "if statements",
  "parent selectors and container queries, though i understand the immense difficulty in implementing both (the latter less and less as things like ResizeObserver are implemented in js, though)",
  "Support from browsers. Having to tweak styles or use workarounds. I hate that",
  "Container Queries",
  "height queries",
  "Better names for flexbox properties would be enough.",
  "Namespaces like in C# and logic.",
  "Functions",
  "Classes and variables",
  "counters that don't conflict with each other",
  "SASS like variables. Defining variables in your stylesheet is easy but I'm lazy and don't hate typing so much to use a variable in one place.\n\nA method to target the parent element in a way not requiring  :root",
  "Container queries",
  "the ability to target a parent element / selector from a child selector. currently its parent > child :)",
  "A parent selector ",
  "Debug tools",
  "More wrapping up of utility classes within html elements",
  "More magical integrations with the JS ecosystem so that developers who don't like CSS can use CSS's full potential.",
  "selector for parent",
  "Browser Unity. Browsers should act the same for all css features, I should not have to write something specific and tweak for different browsers or using shims.",
  "Some new language features, when they go wrong they go really really wrong for end users, and this is browser support wrong rather than programmer usage wrong. Mixed browser implementations are just so dumb when you're trying to rely on technology to get a job done rather than play around. ",
  "Native nesting",
  "iteration and mixins (would make preprocessing obsolete to me)",
  "Non cartesian coordinates",
  "parent element :)\nreal nth-class\nreal empty-field selector",
  "More conditions and selectors",
  "1) select parent because child is present:\n\n.parent <<<< .special-el {\n// the element containing class \"parent\" contains \"special-el\"\n}\n\n2) double-slash JS-style comments\n\n3) nested selectors:\n\narticle {\n  p {\n    // this is most of the reason I still use SCSS\n  }\n}\n",
  "Sass-like selector nesting, media queries for \"parent width\" and \"parent height\"",
  "What I most miss is the ability to select the parent of a given element. For example, say in `div .child` I want to select all div elements with .child inside of them instead of the .child elements. This could be done with a $ sign or something similar in front of the element you want to select (default would be the child)\n\nAlso, it's ridiculous how complicated CSS triangles are to make.",
  "parent selector, please",
  "Snabbare stöd för nya saker till webbläsare tex flex gap",
  "Parent Selector would be super nice like:\n.parent < .checkbox:checked\n// update that parent element :D",
  "element queries",
  "fixed column/rows in tables, styling select options",
  "That we are moving away from pure css and putting it in JS. We are starting to missing the segregation.",
  "Container Queries. Something that detects intersection with browser edge.",
  "Container queries,\nstyling shadow DOM\ntext columns",
  "Nesting",
  "container queries",
  "easy layout, styling forms, microsoft dropping IE11 support",
  "Element level media queries\nMore named colours ",
  "Animated transitions between dimensions if the dimensions are set to \"auto\"",
  "more flexible attributes for CSS Art",
  "Parent selector\n:sticky pseudo-selector",
  "Most of the features I want to see are already in development. ",
  "I'm missing the overall \"big picture\". Css feels like patch work and seems a bit inconsistent at least at the first glance",
  "- Parent selector\n- Browser calculated Heights",
  "Nested rules",
  "Parent selection, element query",
  "Constraint-based layout, ala Auto Layout. Easier customizable inputs such as checkboxes, radios and progress. ",
  "Уникальных автоматизированых селекторов",
  "Previous sibling ",
  "Baseline control replacing line height",
  "What CSS needs:\n- Semantic error/warning reporting (e.g. using a duplicate selector, using `ol + p` before `ol ~ p`, using `margin-left` before `margin`, etc)\n- ability to mix & calculate colors at “runtime” i.e. in the browser & DOM\n- ability to read and reuse styles from other selectors\n\nWhat CSS has that it shouldn’t have:\n- Specificity is a pain point, and it should be removed.\n- ID selectors should be removed.\n- nested (child/descendant) selectors should be removed.\n",
  "Container queries",
  "container queries",
  "if-else",
  "Native mixins and/or includes, like we Sass ones.",
  "Official CSS in JS and component oriented solution",
  "container queries",
  "select styling",
  "Easier method to control scaling type in responsive",
  "nested selectors",
  "There are a lot of things pre-processors have implemented that I feel should be added to vanilla CSS; one in particular is nested styles.",
  "Cross-browser support for text clamping.",
  "vw that doesn't include the scrollbar",
  "Container queries",
  "parent selector",
  "component queries",
  "container selector",
  "- Being able to style inputs/selects without a hassle and JS.\n- Being able to use the line-height in calc().\n- Being able to specify the width of an element, based on its height.",
  "Parent selectors",
  "Contained @media queries",
  "Standarts..... everything should work on all browser at the same functionallity. Right now some things look strange at safari whilte chrome, firefox, edge looks great....",
  "integrated features from different tools like sass to the vanila.",
  "Includes and conditions could be inside css, without the need of using a processor like LESS.",
  "Nope",
  "Being able to style all native web components with ease and flexibility.",
  "Nesting, variables, mixins.",
  "container queries",
  "Container queries",
  "- Better access to custom styling for form elements\n- Access to custom styling for audio and video players",
  "Container-size media queries. ",
  "Something similar to ES6 Modules, but for CSS. CSS still tend to get huge and everything's merged into it. I personally like the separation of concern between markup, JS and CSS, but we need to be able to cleverly load additional CSS when necessary. May be web components will be the way, but it comes with disadvantages.",
  "Not sure if it's a feature, but more even browser compatibility (i.e. less differences in whether a feature is or is not supported in a given moment) would be appreciated.",
  "parent selector",
  "More understandable layout posisitonning. Like flex. But no one gets it. It's been almost, a decade. Still no one understands.",
  "None that aren't already underway",
  "container queries\nmulti-line text truncation",
  "Native nesting",
  "Container queries",
  "parent selector :D",
  "Looping, color functions, reusability.",
  "JSS is taking care of most of the things I miss.",
  "Query selectors, nesting (in vanilla)",
  "scoped css (without any 3rd library)",
  "parent selectors, animating height to \"auto\"",
  "media queries relative to parent size. I understand it's tricky because of recursive nature of this feature but it really useful. ",
  "container queries\nlazy loading of CSS",
  "\"is using a screen reader\" checks",
  "parent selectors",
  "Use content/values from HTML attributes in CSS\nSmarter position sticky/fixed behavior\nBetter mobile vh behavior",
  "viser le parent d'un enfant",
  "More native functions",
  "style form controls",
  "Cross Browser and Os wide support for all functions ",
  "Container Queries x infinity",
  "Improved contained or location-based selectors to better scope parent/child relationship styles.",
  "Subgrid support in all browsers",
  "sibling before selector (the opposite direction of div + div)",
  "Underline fine tuning",
  "Fun",
  "Easy straightforward solutions to common problems",
  "Element queries ",
  "parent selection",
  "Des breakpoints par défaut pour homogénéiser les breakpoints.",
  "-",
  "Previous",
  "1.Please add linear gradient to border immediately.\n2.More 3D interactive and animation.",
  "Nesting which is only possible with preprocessors atm",
  "Simplicity :) It used to be much simpler, but now it's become a very complex and difficult language to grok.",
  "Consensus",
  "parent selector",
  "Upgrading CSS to a real programming language would be cool",
  "layout is hard",
  "Group-hover",
  "Container queries pleaaaaase",
  "That's more a browser compatibilities than a missing feature issue...",
  "Parent Selector. Previous Sibling Selector. ",
  "CSS can pretty much be automatized.",
  "Parent selectors",
  "standardization",
  "leading-trim!!! and good support for supgrid.\nfeature-querys\nBetter E-Mail support",
  "Parent selection;  some functions like sass has;",
  "Scopes",
  "In-browser sass so it doesn't need to be compiled.",
  "Container queries.",
  "Functions for dynamic values (specifically related to window size)",
  "Parent selectors (like \"#box < a\")!!",
  "Prefers hand",
  "Nos es una característica, pero algo que me molesta es el soporte entre navegadores",
  "Parent selector",
  "Technology support",
  "Container queries",
  "less typing, easier selective parent selectors",
  "Parent selector and custom filters (https://developers.google.com/web/updates/2013/03/Introduction-to-Custom-Filters-aka-CSS-Shaders)",
  "Container queries! Container queries! Container queries! Container queries! Container queries! Some other stuff, sure, but mostly container queries!",
  "Native selector nesting, LayoutAPI, AnimationWorklet",
  "some sort of ternaries or conditionals without using preprocessors.",
  "Overscroll content",
  "SASS features in CSS",
  "rgba but for hex values",
  "browser compat, although not really css' problem",
  "explicit separation of layout from style",
  "Composition: the ability to define a CSS class that composed other CSS classes\n\nContainer queries\n\nThe ability to dynamically know when elements no longer fit in a space and make different layout choices",
  "Browser support.",
  "Meilleure gestion du responsive, du zoom navigateur/OS (px densité)",
  "More robust print CSS features to reduce the need for PDF converters and simplify print publishing",
  "Subgrid",
  "Native styling for form elements, parent selector.",
  "Container Queries. Container Queries. Container Queries. ",
  "A good standardisation or opinionated approach solving practical CSS task such as layout / styling",
  "There's a space between the top of the text and the edge of the element that I'd like to be able to eliminate as it would make controlling the space between items on the page easier as I wouldn't have to account for those couple of rogue pixels",
  "Parent Selectors",
  "Consistent support in all browsers",
  "All the weirdness and tooling around CSS could be eliminated if it were just an actual Turing complete language instead of a DSL.",
  "Nesting",
  "Preprocessors' functions",
  "Fuck BEM",
  "parent selectors :pray:",
  "Better solution for text (for ex. ellipsis)",
  "more functions",
  "Nesting\n",
  "- Hanging punctuation\n- Control over leading (fonts)\n- Styling of <select> and <input>",
  "Consistent features support on all browsers.",
  "Container queries, grid-span-all keyword to fill implicit tracks",
  "Scope",
  "parent media queries, parent (if parent is .class, then...)",
  "Support for subgrid universally.",
  "parent selectors; element queries.",
  ":nth-of-class selector",
  "Not css specific, but browser standardized application ui components ",
  "Élément queries, eg:\n@(‘#element) and (min-width: 240px){}",
  "Native support for scoped CSS, states",
  "Masonry",
  "Backwards compatibility is too difficult",
  "Hum... i can do what i want in CSS. Maybe the ability to select above selector instead of only descendant ^^ but i guess CSS should not be \"Cascading\" anymore :D",
  "media queries for the parent / current container.  :is()?",
  "Sanity",
  "Container queries",
  "Easy to remember properties that don't require reading the documentation all the time.",
  "consistent implementation",
  "Functions, concatenations, concatenations and a background-opacity property. ",
  "get element parent",
  "line height (lh) unit",
  "A better way to do animations ",
  "a lot of in-depth knowledge",
  "The basic understanding what CSS was meant to do. It's a cascading style list. Styles should work together, and are defined in the CSS, not in the DOM structure. Frameworks such as Angular and Bootstrap (especially when working together) have broken how we used to build web, and not for the better.",
  "Container queries",
  "Container queries",
  "More Sass-like support in regular CSS custom properties, like darken/lighten/alpha options",
  "nesting mixins",
  "Container/Element queries, full browser support for Houdini, CSS3 + CSS4 (:is, :where, :match, :has), conic-gradients, text-fill, full support for logical-properties, ....",
  "Scoped styles",
  "More functions like calc(), e.g. some SASS functions, darken(), lighten(), etc.",
  "Debugging, transferring changes made on dev tools to IDE, tracing where properties come from on dev tools",
  "More powerful styling for native form inputs.\nContainer queries.\nBetter built-ins for CSS reset. ",
  "targetting a parent element with a selector like \"has-child\"",
  "Sticky with different horizontal and vertical overflow contexts ",
  "Layout constraint solvers",
  "SUB GRID SUPPORT IN CHROME (not CSS's fault... but c'mon Google)",
  "container queries, nested media queries",
  "The ability to write styles without cascading (inheriting from parent element).",
  "Container query",
  "Built in utility framework",
  "Ancestor selectors; ",
  ".child < .parent {}",
  "Mixins",
  "Parent selectors and element queries.",
  "Better typographic controls over widows, orphans, text lockups",
  "Rules or guidelines from the horses mouth on the factual best / most efficient way to write your css",
  "Respect from the back end",
  "Parent Selectors\nContainer query",
  "a good polyfill",
  "deprecation, css-in-js, atomic ",
  "css nesting like in all preprecessors, e.g.\n.container {\n  .inner {}\n}",
  "Excellent unit testing capabilities",
  "Container queries",
  "Parent selectors, easy styling & support for common custom elements like selects, dialogs, tabs, etc",
  "Container Queries probably doesnt need to be said. \n\nI'd be very interested in pushing CSS in SVG more. SVG is all parameters. Could we animate x, y, filter settings etc, rather than just colors and things?",
  "Вложеность",
  "A way to apply style for specific browser engines and versions",
  "Container queries, más facilidad para soportar accesibilidad sin \"trucos\"",
  "Better aural support",
  "Styling form element natively without hacks",
  "mixins, nested rules",
  "Houdini utilities frameworks",
  "Local scoping",
  "Родительского селектора - :parent{ background: red }\nБольше математических функций\nВозможности доставать значение через attr не только в псевдо-элементах.\nЭто наверное больше к html но двойного range input!",
  "Oh god, just so much",
  "Cibler le(s) previous sibling(s)",
  "Better DOM traversal",
  "Element Queries ",
  "Clearer documentation and visual reference ",
  "Условия в стандартном CSS. Многоуровневые соседние селекторы. Возможность использовать скобки. ",
  "Multiple sequential animations depending on what happened before. I.e. what triggered it, e.g. on hover start and on hover end.",
  "nesting\ncustomize form elements\nhoudini",
  "Honestly, CSS is missing a solid foundation. There is nothing which can be patched in as a backwards-compatible extension. It's fundamentally broken.",
  "nesting",
  "Child style parent",
  "There are lots of new CSS features, but I can't use them when our product targets a wide range of browsers. I wish groups of CSS features were versioned so that browsers much support all features correctly in the version.",
  "I would love to see a media feature allowing to detect whether a user prefers left-handed or right-handed layout. That would be handy when designing for mobile devices.",
  "Nesting",
  "More Animations",
  "Container queries, component based sizing",
  "targeting parents from a child.",
  "Full support across all browsers",
  "Mainly better browser support for existing features like universal \"gap\" support and subgrid. A :has() selector, particularly for the <label><input/></label> pattern e.g. label:has(input:checked) {}. Masonry layout in Grid or some other solution to allow columns to have different row counts, so that sidebars aren't pushed down by large content blocks in a main column.",
  "Style isolation without shadow DOM",
  "New layout modes",
  "Scoping (not in web components) ",
  "Everything in the Paged Media Working Draft",
  "css is too much features\nneed to be simpler\nunclear syntax and too verbose.\nverbose is good. but css syntax is unclear. thats why i made myself  a css preprocessor that generate extremely optimized css.",
  "Parent selector",
  "Ease of use. Selectors and behaviours are convoluted. With Tailwind and the like making this easier, CSS should incorporate the majority of this natively. 100% of devs I know, regardless of their experience, all state that CSS is a difficult beast to tame. With the way in which JS has implemented changes over the years, it makes writing code so much easier...the same needs to happen to CSS. ",
  "Ability to nest selectors like in SCSS\n.foo {\n &-bar {\n  color: #fff;\n }\n}\n\n",
  "too many ways to do same task",
  "Something like Babel, which would allow to write current CSS (in preprocessor of course) and have it bundle down to what is currently available in browsers (mostly for logic things and other properties)",
  "variables and functions",
  "Mixin, Func, Iterations ",
  "Browser support",
  "The ability to \"customize\" CSS; much as jQuery did for JavaScript, in a way that CSS can be standardize across devices.",
  "faster browser adoption",
  "selector nesting",
  "parent selector",
  "imbrication des selecteurs",
  "N/A",
  "Aspect ratio for images (it can't come soon enough)",
  "Better support with mock-up tools like Figma and Sketch. Design handoff to engineering is not straightforward.",
  "Higher level selectors (.bar ^ .foo) to select foo that contains bar",
  "A \"previous sibling\" selector. Container queries.",
  "Récupérer un data de l’HTML sans passer par un :after ou :before. ",
  "More GPU accelerated properties",
  "Priority of selectors within multiple files in SASS - so I can make a particular class or whatever higher importance even if the file is imported higher up the page whilst keeping clean selectors.",
  "Working container queries!",
  "removing overwritten styles",
  "Element queries",
  "Tailwind has solved css. ",
  "Something like a switch()",
  "Apply style to parent(s) of specified selector",
  "Multi-line ellipsis (standardized line-clamp)",
  "More Houdini",
  "nesting, container queries",
  "Parent selectors.\nGlobal z-index escape hatch (exit a stacking context).\nRegular expressions in attribute selectors.",
  "Something comparable to android constrained layouts",
  "pouvoir remonter au parent",
  "I would like to evaluate a set of CSS and HTML and get in return the dimensions and positions of result. This would be useful for testing and removing the need for doing JS driven layout calculations for specific tasks.",
  "container queries, :inert",
  "container queries",
  "Container queries :D",
  "Parent selectors. Sass-style nesting and variables.",
  "Resets",
  "functions like in sass",
  "CONTAINER QUERIES",
  "Browser support for newer features",
  "Consistent support across browsers",
  "burn CSS!!! inline styles in react or restyle",
  "- overflow pseudo-classes\n- form input styling",
  "Enforced style encapsulation.",
  "Namespacing (ie. when Bootstrap hijacks all the common class names), a variable syntax that is not butt ugly, ability to style all form elements, better control of advanced transitions, better control of separate layers on a page (positioning and stacking contexts are often difficult to handle properly), container queries (\"if this container is wider than 700px...\"), much better tools on the pre-processor side (suited for creating design systems, easy to configure, maintainable for big projects, etc)",
  "text-wrap: balance;",
  "Container Queries",
  "Working container queries, scoping",
  "More options for typography",
  "Most important features from pre-processors would be nesting and imports, beeing able to split in multiple files without more HTTP requests",
  "Mixins",
  "Better select/input styling, Container Queries",
  "sass style nesting",
  "Media queries relative to specific element dimensions",
  "mixins, nesting, imports, data params (ex: set an amount on a data attribute and use it in `height: [param amount];`)",
  "Support for multiple screens/foldable UI.",
  "Parent selectors ie. only div's that have a ul in them, div<ul",
  "Parent element selectors or styling elements based on the presence of child elements.",
  "when element use his max-width but max-with his parrent.",
  "Grid polyfilling",
  "It is good enough for most things without needing all these add-ons which just confuse things",
  "Container Queries",
  "There is solid competition for MaterialUI / Bootstrap missing. There were some nice alternatives like SemanticUI or Blueprint but it's very often that these project are left unmaintained.\nThat's one thing. Second one - I sincerely hate new modern UI designs. Material Design is probably the worst - both for using and it looks terrible. Also new version of Bootstrap is also worse than previous version.\nCSS itself is evolving quite nicely",
  "More programmatic approaches to write base CSS instead of relying on pre/post-processors and other tooling. ",
  "webgl + XR",
  "Arbitrary styling as byte code to use for polyfills",
  "Parent selector ",
  "Maybe container queries? Maybe…",
  "Line heights and overall working with fonts. Positioning text consistently is a nightmare.",
  "better standardisation of page overflow / scroll handling across browsers",
  "cross browser supported line clamps and scrollbar styling (soo many designers ask for these)",
  "Container queries\nCustom Units in Houdini",
  "container media queries",
  "sub-grids asap in every evergreen browser",
  "a better developer experience",
  "object-inheritance/polymorphism -- have a class that inherits from others (in order)",
  "Fix di alcune vecchie funzioni che funzionano in maniera macchinosa ma che vengono ancora usate.",
  "Further standardization across environments",
  "hanging punctuation",
  "I only use CSS-in-JS because we still don't have container queries.",
  "Cleaner nesting",
  "As a designer who likes to work with HTML & CSS, I'm interested in better typography control. I'm still wondering why the ch unit doesn't count the number of characters in a line instead of the number of 0. Easier tools to style forms would be nice. ",
  "Container queries",
  "Nested selectors is the only thing that I find really frustrating at times (coming from SASS), but I know that's under consideration at the moment.",
  "1. 父元素選擇器\n2. 列印用CSS可以支援更多，包含 border-width < 1",
  "ints for data attrs",
  "Easy ways to animate auto heights. (eg. in accordion type forms)",
  "(surprise) container queries, and non-global styles (shadow dom but without having to implement Web Components)",
  "Maybe some pre-defined CSS native components",
  "child < parent {}",
  "Nested class extension using the “&” sign",
  "поиска вверх по селекторам",
  "More logical statements and queries",
  "Container queries",
  "Все те свойства, которые годами не еще не поддерживаются браузерами",
  "Functions, mixins ",
  "Not a feature, just an understanding of it. Too many tools and flavors that all fail to solve the same problem: people don't really understand CSS and how to architect styles, not just declare properties.",
  "easy performant animations without penalties",
  ":parent,  :contains(), :before() selector",
  "Loops/iterations to generate several classes",
  "Nesting",
  "tener un visualizador en vivo para probar estilos in tener que ver el navegador",
  "Some form of native scoping to web components",
  "Container queries!!!",
  "Nested selectors, iteration",
  "a :parent type selector, to select an unknown container of a known selector (especially useful for changing position)",
  "Preprocessors functionality (nesting, mixins, extends, etc.)",
  "Container queries, parent/context selector",
  "nesting, mixins",
  "Media queries as conditionals for variables",
  "C'est surtout le support navigateur qui est un problème.",
  "Ability to change an element based on child selectors\nie: make something blocked if there is only one child",
  "I'd like to have many features removed/deprecated (stats will reveal hints which ones)",
  "Container queries",
  "Container queries. More constraint based tools",
  "Nesting of classes",
  "CSS Rhythmic Sizing",
  "Everything that is on the coming soon list but takes years to actually land in the browser.",
  "better solutions for nested grid",
  "Ease of animating stuff for beginners. Very few people understand the complications animations can bring when it comes to performant animation and why is it necessary to use transform as much as possible and why one should not animate width left right top bottom properties. Unless containment is adhered. So many factors to consider before animating tiny bit on screen. ",
  "CSS has evolved very little in recent years, and now many interesting things are coming ... I think that many of these new functionalities will affect most frameworks and ways of working (In conclusion, I think that advances in CSS should be launched in parts, and not all)",
  "Scoped CSS\nContainer Queries",
  "debugability",
  "More spotlight",
  "Good 0-100 learning guide",
  "Scss nesting capabilities. I saw that might be coming in CSS Spec Level 4.",
  "Subgrid and masonry layout",
  "parent selector!",
  "Container queries",
  "-",
  "Container queries, conditional @-blocks based on custom prop values",
  "1) Better support across modern browsers.\n2) TO STYLE A <SELECT>, PLEASE.",
  "Nesting in CSS would be cool. Then I could stop using SCSS.",
  "Mixins, extends",
  "Multicol in the block dimension, aspect-ratio, masonry layout",
  "Not necessarily CSS, but how many times have you spent debugging trying to find out what element or css class owns this 1px border in your app? Feels like thats a gap. ",
  "build-in solutions that we dont need to write over and over again,\nmaybe generic reset or something",
  "- A decent multi-column module: the current one is unpredictable and very, very quirky...\n- Parent selectors\n- Container queries",
  "New CSS features implemented in all browsers at the same time",
  "previous sibling selector",
  "I think the current push to CSS in JS is very annoying. I get why it's used this way but I wish there were more SCSS/CSS ways of approaching this issue. ",
  "Container queries",
  "Better (retro-)compatibility between browser and faster adoption of new properties (CSS4, etc.)",
  "One common level of spec which is implemented in all browsers and updated at the same time.\n",
  "Element queries",
  "soporte nativo de mixins, expandir operaciones con valores, para eventualmente dejar de utilizar preprocesadores",
  "Container queries",
  "Compatibility in all browsers.\nStandards",
  "being able to change the look of the different html form inputs, like checkboxes.",
  "element inheritance, for instance;\n\nheight: 100%;\nwidth: inherit(height);\n\nWhich means that the width won't be also just 100%; but will get it's calculated value from height. So if the height 100% is 50px, the width will also be 50px. ",
  "Container/element queries, parent selectors, ability to style linked SVG whether through symbol or img src, ability to chain animations without manually setting delays",
  "Mostly Browser Support for new Features",
  "Some native solution for making it easy to delete styles without fear.",
  "Selectors for in-viewport",
  "• Better support in legacy browsers ¯\\_(ツ)_/¯\n• Multi-line text truncation without `-webkit-*` hacks\n• ",
  "I'd like to have some kind of mixins and conditional functions like they are in pre/post processors.",
  "The cascade is actually really painful.",
  "form element styling 😭",
  "Easier styling for input elements. It's still so hacky and outdated to make custom form elements.",
  "parent selector",
  ":focus-visible\nstrict-mode/deprecations",
  "parent selector",
  "low-level crossbrowser framework like React, Vue to cover features and cut edges ",
  "Color manipulation functions (brighten, darken, saturate, desaturate, hue-rotate, …).",
  "Parent selector, select and optgroup styling, conditional expressions, CSS variables in media queries",
  "Container queries, sub grid",
  "Element queries",
  "- container queries\n- standardized multi-line text truncation",
  "nesting",
  "More native elements ",
  "container queries",
  "More selectors and support around accessibility (ie, `:focus-within`)",
  "Container queries, flex gap, native nested selectors, ",
  "Better management of overflow, where it concerns absolutely positioned elements\n\nSetting bounds of transformed objects so that positioning is more predictable\n\nBetter management of responsiveness for all the different screen sizes and dimensions. There needs to be something that you can create a real predictability with so that designs can be truly creative and intentional at all screen sizes. There‘s an element of perfectionism, but it’s something I’d like solved.\n\nColour functions\n\nBeing able to write modular CSS\n",
  "Container queries, parent selectors (aka `:has()`)",
  "Features cross browser ",
  "Overall standardization, on the way we write css and name things; from plain css to frameworks",
  "Parent selectors.",
  "More uses for variables.",
  "Container queries and namespaces",
  "We could always use more consistency in support across browsers",
  ":nth-word",
  "1. There should be a way for positioned elements to “escape” the boundaries of an `overflow: hidden` parent.\n\n2. There should be a way to write a CSS “out” transitions which end with the element being `display: none` but not immediately. Currently transition something in (e.g. from `opacity: 0` to `opacity: 1`) is easy because you are `display: block` the whole time. But when you want to transition out, you can either `display: none` and have no transition, or you can use `pointer-events: none` as a hack. Of course you can also use JS to solve this by listening to the `transitionend` event to set the display to none, but it would be great to have a CSS-only solution. This _is_ a CSS survey after all ;)",
  "Full stilisation for the from elements. Full subgrid support. Container queries.",
  "Vertically centered divs",
  "Color functions (like in preprocessors: lighten, darken etc.)\nFinally a parent selector (now maybe we don't have that much performance issues like in the past years).",
  "Since browser struggle with it: more properties to unify renderings in browsers (i.e: font rendering between Chrome/FF/Safari Windows/Mac, etc...)",
  "native ability to style <option>; ",
  "Parent selector",
  "Native mixins",
  "People taking it seriously as a skill in and of itself.",
  "Easy Learning Curve",
  "-",
  "A way to easily test websites on Windows browsers while I only have a Mac Available",
  "Subgrid widley adapted",
  "More browser investment in new feature support.",
  "Container queries, mostly.",
  "Vertical centering. I mean actual vertical centering. Not faffing around trying various different methods. See also equal heights.",
  "Nothing that wouldn't invalidate its name.",
  "Container queries, nesting media queries in a definition (like can be done in SASS).",
  "Some kind of help for non-designy people to get things done from ideation to implementation",
  "Ease of converting design to code.",
  "One common grid approach instead of several fragmented ones",
  "easier scoping, pseudoclasses and pseudoselectors inline, more math, easier styling of input elements, style parent based on child (oposite of: div + span {})",
  "• data typing \n• please finish houdini that will fix everything and create an open community of plugins like Javascript has \n• subgrid everywhere\n• ability to read HTML attribute values, you could then use JS to get and set values in the HTML and CSS would update the visuals keeping concerns separate instead of having to rewrite CSS and HTML into your JS to tell it what to do when events occur. i think that single feature would help CSS be truly state aware. another benefit of keeping all data in the DOM would be improved accessibility :)",
  "Shorthand notation for the position attribute in combination with left, right, bottom, left;",
  "Очень нехватает селектора родителя!! Ну Пожалуйста!!",
  "exclusiones, manipulación individual de las letras en css, css3 en emails, css touch interactions, más pseudoelementos, mixins, control de creación y dibujo de svg de los paths o polígonos",
  ":has() pseudo-class, nested blocks",
  "Scoped CSS to specific components/modules",
  "element query and we could probably find more layout tools like grid to make layouting even better",
  "Subgrid. Being able to measure a font by its cap size for more control and better vertical centering than the inconsistent half-leading browsers use now.",
  "Stability from the community as to what stack to use",
  "aspect-ratio (← browser-support), better options for styling underlines of linked text, element-queries (like media-queries but measured on an element's size)",
  "container queries",
  "Nesting rules like SCSS uses.",
  "Respect. ",
  "CONTAINER QUERIES",
  "i hope someday will be CSS4 maybe :)",
  "Больше функционала",
  "Some kind of consensus",
  "Nothing at the moment? Maybe better support for complex animations? Feels like I’ve much to learn still",
  "A preceding selector.",
  "parent selector",
  "Nesting and variables/mixins similar to what we have in SCSS",
  "- “In viewport” / “is visible”feature. Not only would this help us with TTI (ie above the fold and critical CSS), we wouldn’t need JS solutions like IntersectionObserver. \n- CSS Grid centering\n- Parent selector\n- Hmm.. [_exhales_].. SVG filter definitions inside CSS? Then we could easily transition / animate.",
  "logic",
  "Container Queries, SASS-style nesting",
  "Shortcuts to build different layouts",
  "Nothing, i feel to many is being added. A language for styling doesn't need code to handle logic. Please let the programming language using the styling language handle that.",
  "a way to fine-tune selection of elements like you can do in javascript (parents, parents of parents etc...). ",
  "scoped styles",
  "select previous elements in DOM",
  "Ability to write good, scalable CSS with nesting and prefixes without Prepos.",
  "Обновляемой документации",
  "Better support for new properties",
  "Better support for complex animations. Element queries",
  "native masonry layout, auto-breaking of long strings in a table",
  "Looping, better parent/child selectors",
  "Masonry",
  "features of most pre-processors like Less natively supported.\nMore consistency between browsers",
  "container queries",
  "Color functions such as darken and lighten",
  "What SCSS offers",
  "ease of associating styles with view",
  "fast animations of width and height",
  "Multiline text ellipsis PLEASE",
  "container queries",
  "Sass nested like selectors, mixing, some functions, namespaces, unified properties (to avoid autoprefixing)",
  "Container queries",
  "loops",
  "More standardisation between browsers and faster pickup on new technologies, not hampered by operating system update schedules.",
  "Container queries",
  "better debugging.  Browsers are getting better at this but still needs work.",
  "parent selector!!!!!!!!!!",
  "media queries for containers",
  "Container queries",
  "aspect ratio, background video, native burger nav / drawer, native modals, accessible input types, select with search (chosen.js)",
  "I wish adoption of techniques like TailwindCSS were more widespread. I don’t get to actually do any work projects with it.",
  "bulit in css responsive attributes",
  "container queries",
  "Babel for CSS so we can use new features asap!",
  "Universal browser support of all CSS properties",
  "Container queries, viewport units that take into account the scroll bar width ",
  "Better (and faster) browser support mainly =D",
  "parent selectors, sub-grid, and container queries are the continual big ones",
  "aspect ratio support everywhere",
  "native mixin support would be awesome!",
  "parent selector",
  "it is overwhelming, and css behavior is coupled too much",
  "Parent tag selector",
  "The ability to properly style \"native browser\" elements such as scrolls, radio buttons, checkboxes, etc.. I think it's still in specification. But it's been a long time coming.",
  "conditions without relying on pseudo-boolean custom properties trick",
  "Modifications in how z-index works",
  "Selection du parent ",
  "flexbox rows but with some kind of offset or styling per row? or how many you would like per row.",
  "conteiner queries",
  "Leading Trim, Container queries, Parent selector, and removing cascading in some scopes (avoiding global scopes)",
  "Programming logic: if/then/else\nFull page perspective: ability to move up and down the HTML heirarchy post-load without JavaScript",
  "Container queries",
  "An alias for tags that started out in abbreviated format: a, img, p.\n\nI'd rather be able to use anchor, image, paragraph as tag selectors (not class selectors)",
  "custom layers, scope, container queries, styling form controls…",
  "Container media queries",
  "Support for SCSS features like @each and mixins",
  "We need aspect-ratio and sub-grid to be implemented everywhere! CSS as a language is almost there, I just hate how many rival CSS-in-JS options there are. Would be good to have an industry standard way of doing things.",
  "Delete IE11 from all computers so we can move on with life.",
  "Condition de classe de propriété, boucle etc ",
  "types, better integration with js",
  "Soporte estándar y transversal de navegadores",
  "Practice to do better stuff ",
  "Вложенные селекторы",
  "Вложенность селекторов",
  "parent style base on children's status",
  "Browser support for subgrid",
  "Element Queries",
  "Better layout tools, better form styling options, better background options",
  "Nested selector",
  "loops",
  "has-parent or parent-is",
  ":is() and parent/grandparent selectors in all browsers",
  "Не нравится поведение скроллбара при использовании content-visibility: auto;",
  "Easy approach for responsive development, especially with font size on different screen size, dpi and resolution",
  "sub-grid, masonry",
  "Parent element selectors to be able to affect the container of an element without knowing/being able to add a class to it due to restrictions of access or limitations within a site's frameworks or settings.",
  "Container queries",
  "element queries, parent selector",
  "container queries",
  "Container queries, subgrid (for now), spring animations, color functions, a nicer variable fonts API",
  "min-padding, max-margin, etc.",
  "conditions, reading and setting data from tag attributes",
  "Feature Queries",
  "Container queries",
  "Container queries",
  "conditionals and programming-like abilities. Scoping would be nice",
  "Lea <3",
  "responsive tools + js detection native, accesibility",
  "Variables faciles de usar",
  "Subgrid (! :-)), container queries",
  "Nested selectors out of the box.",
  "CONTAINER QUERIES... `vw` to not include scrollbar, :facepalm:",
  "Container queries",
  "parent selector",
  "Better and more consistent cross-browser ability to style native form input elements and controls such as checkboxes, radio buttons, range sliders, date pickers, color pickers, file pickers, etc. ",
  "Component Queries",
  "multiline sentence support, so we don't need to worry about div height when text length dynamic. when text length is exceed, we can put \"...\" at the end of centre",
  "Parent selector",
  "parent selector",
  "Visual Editors",
  "CSS rule nesting (As is possible in SASS or LESS)",
  "Вложенности, родительского селектора",
  "Parent selectors, obviously. ",
  "Container Query, Masonry, display: \"carousel\"",
  "Parent selectors, container queries",
  "parent selectors",
  "Programacion",
  ":parent will be wonderful",
  "Systematic/conditional formatting natively from code on the page. Angular uses ngclass to conditionally apply a class, but i would like to see some kind of systemic options available in css",
  "Container queries",
  "Cross Browser Support",
  "I think we currently have a great set of supported features but naming and conventions are not very intuitive, I have to constantly search again for how to do things like css grid or some flexbox quirks.",
  "con un selector poder llegar al padre, ejemplo: .child:hover .parent{color:red}",
  "Nesting (in draft), container queries, performing a calculation based on the index of an element.",
  "Possibility to detect a contrasting color.\nLogical operators.",
  "Nesting",
  "Animation tweening like Greensock. I know it's cascading but selecting an element's parent would be AWESOME",
  "Container queries.",
  "Consistent browser support",
  "Container queries, previous sibling",
  "Ways to make it safe to find and delete unused styles. ",
  "Working combination of :not and :nth-of-type selectors. Counting only elements without specific selector ",
  "Container queries! ",
  "SCSS mixins, nesting and variables should be standard CSS",
  "Selecting parent elements",
  "Support in Safari\nSubgrid everywhere",
  "Container queries",
  "leading-trim realted stuff: https://github.com/w3c/csswg-drafts/issues/3240",
  "Container Queries",
  "Flex gap",
  "Browsers supporting all features, eg. Firefox doesn't support backdrop-filter",
  "SASS style nesting. More functions.",
  "Container queries",
  "Nada, CSS should stay in its lane and it does that well.",
  "parent selector",
  "logical operators",
  "I'm so happy with the new CSS features, grid, flexbox (not so new), custom properties and responsive sizing.  The one very important feature that is missing, which keeps me from just writing pure CSS 90% of the time... native nesting of selectors. \n\nI see what is spec'd out in CSSWG, but I really don't like the ampersand.  It just takes so much joy out writing CSS.  I get that people really didn't like custom properties, using var() and --, and that people got used to it (I really didn't mind that as much). but with nesting, I just would like to see it done exactly like we've been doing for so many years with just about every pre-processors (i.e. SASS, LESS, etc).  \n\nFor example:\n\n.element {\n  .bar { }\n}  \n\nNOT a fan of the current proposal (with ampersand):\n\n.element {\n  &.bar { }\n}",
  "scoping / non \"cascade\"",
  "backdrop-filter\ncalculation\nvariable manipulation",
  "be able to specify transforms separately, not only in transform:. You get long lists of transforms (rotate(90deg) translate(...) scale(...)) etc\n\nThis becomes problematic when you want to override a single transform from that list.\nCurrently one must duplicate the entire list of transforms, or specify the value as a var(--rotate) for instance and overwrite the --rotate var. But this is suboptimal\n\nOther than that, I am always eagerly waiting for most of Mozillas new css proposals to become standard.\n\nAnother thing I hope for is somehow discourage browsers from introducing vendor prefixes. -webkit- -moz- etc",
  "Horizontal sticky positioning ",
  "- Broad support for clipping paths\n- Subgrid",
  "Make working with elements in 3D easier natively, and native mixins.",
  "mixins, nesting selectors",
  "Loops and conditions ",
  "Container queries",
  "CSS variables in media queries",
  "Nesting import other css.",
  "Ciblage d'élément parent",
  "Support de flexbox gap sur safari 😢",
  "функций, которые имели бы большую поддержку.",
  "parent pseudo-selector",
  "Please don't, I think it needs more stable for every browsers",
  "Color utilities",
  "Parent selectors.",
  "Proper line-height, previous element selector",
  "A vision.",
  "element queries, new grid system which would work with component frameworks",
  "Simplicity",
  "Widespread understanding of how to use/write. Repercussions/fallout of writing bad css",
  "Nesting",
  "Better computational tooling. CSS is perfect for wave function collapse.",
  "Selector for an element based on how many children it has.\nOverflowing navigation items into a different box, and styling it differently in the different box.\nContainer queries.",
  "container queries, css regions, element() function (currently in Firefox), custom media query vars (env()).",
  "I wish html and css would never exist. It should be replaced with js.",
  "font-size: fit-container\ntransitioning to/from display: none\ngenerated content for replaced elements such as input",
  "subgrid support, container queries",
  "Nesting structure",
  "Nesting and Mixins like in Sass.",
  "Masonry Grid, line-clamp, parent selector",
  "Container queries",
  "STANDARD METHODOLOGIES",
  "Flexbox gap",
  "Flexibility and theme-ability",
  "Take most SCSS and put it into native CSS by default.",
  "возможности программирования) условий как минимум, умения считывать свойства хотя бы вложенных компонентов",
  "Container queries!",
  "Ascendants selectors",
  "The main problem is browser support.",
  "I would like Safari to support using relative units to define objects even if the parent is not fixed size, like you can in other browsers.",
  "Select parent selectors",
  "Conditions for CSS variables",
  "less fragmentation in evolutionary steps forward",
  "subgrid, :is(), :where(), leading-trim",
  "Stuff making sense",
  "Css nesting",
  "Browser support for modern features",
  "A way to hide and show elements on click that isn't bad for accessibility like abusing a checkbox or details/summary. Flexible masonry style layout.",
  "More transition flexibility to prevent even more using JS for animations.",
  "All the features in SASS",
  "Funktionen wie in Less/Sass",
  "CSS drives two distinct concerns. Decoration, and layout. I think it would lower the barrier to entry if there were a clear, intuitive delineation between decoration and layout rules.\n\nAlso, the ability to define custom pseudo class/elements especially for web components would be cool. Maybe there's a hack-y way to do that now, I don't know.",
  "I just want evergreen browsers to support the same set of CSS. A feature is useless if it's not widely supported.",
  "Some minor State management,\nAbility to control scoping a bit better natively",
  "Parent selector",
  "This survey has revealed me unqualified to suggest what it may lack",
  "container queries, bandwidth of user",
  "parent selector like has()",
  "A more powerfull layout system",
  "Generalized support of custom properties even in non-mainstream browsers",
  "Application-oriented constraint-based layouts",
  "feature queries",
  "Parent selectors",
  "Css style that can change option and select styles",
  "Container queries duh\nMedia queries for overflow",
  "needs some dynamic features to eliminate requirement for JS for basic tasks.",
  "Droping old brwoser support :)",
  "Container queries ",
  "This is more of a browser and monitor thing, but web fonts' typography across operating systems can be a nightmare when trying to make designs exactly as designers specify. So... \"absolute typographic control of a webfont\" without having to do hacks like `-moz-osx-font-smoothing: grayscale;`",
  "Turing completeness",
  "Native nesting, media queries based on parent",
  "background-repeat-offset, container-queries, ",
  "Parent selectors from child",
  "Wider, quicker browser support for new features",
  "There needs to be an easier way to center things, that’s my only struggle!",
  "Obvious and easy-to-read specs",
  "parent selector, a correct way to deal with user-agent customisation",
  "Parent selector",
  "CSS is being bottlenecked by browser support. I can't write any of these new selectors without sacrificing user experience in legacy browsers or an unnecessary headache to support them.",
  "Parent selectors, extensibility via JavaScript, better support for paged media, grid/flexbox improvements.",
  "selected parent tag",
  "Вложенности, как в Scss",
  "A full featured design GUI. Something like Unity but for the web.",
  "Selecting up the DOM tree (like parent selector)",
  "nesting",
  "Container Queries, Subgrids",
  "Lack of native support of scopes and modularity; too strong interdependence between some properties (ie “top/bottom/right/left” and “position”); dependence of property behavior on the environment; when writing CSS code, it feels like it is already unstable from the start",
  "Leading trim! Something that combines grid and flex into one super layout ",
  "Super easy to understand positioning (i feel flexbox is almost there though)",
  "Complex layout capabilities, paragraph styles, complex type settings",
  "Hard to say. Everything seems to be moving well.",
  "selector nesting, global constants, basic constraint layout (ex. place this to the left of that, offset by Y pixels)",
  "Timeline based animation",
  "a selector to select parent of an element (with a given class, for example I want to get parent of .test to apply style on it)",
  "I think great features have been proposed - it just takes forever to implement them. Aspect ratio is one that I'm tired of waiting for.",
  "Changing Opacity on hex css variable",
  "Slimming down all the craziness ",
  "HTML & JS can be organized, similarly css needs some organization structure (few features of sass..etc)",
  "Cake",
  "Can't think of any at the moment",
  "Container selector",
  ":has()",
  "More standards, better best practices, a design system spec, better browser defaults",
  "'size' shorthand for width and height would be nice, other than that grid has been fantastic at doing things I wouldn't have expected to be possible with just CSS",
  "Something like Babel for JS which allows you to use the new specs without waiting for browser support.",
  "Subgrid support, in general faster implementation of features support in browsers",
  "more css-in-js adoption, which implies the end of many specificity problems",
  "More customizable blend modes (e.g. multiply which would include alpha channel)\nAnimation timelines",
  "Container queries! Subgrid (widely adopted)! ",
  "SASS like in CSS",
  "Anidaciones al estilo Sass mejorarían la legibilidad del Css fuente.",
  "A way to change some browser default styles, like the datepibker from date type input element.",
  "Almost exclusively things that will happen soon: attr() anywhere, typed --custom-properties, etc.",
  "parent selector, checkbox and radio buttons customization",
  "display: visuallyhidden;",
  "container queries",
  "Seletores \"inversos\", que pudessem selecionar os nós \"pai\" (ou avô, ou bisavô) dos nós selecionados por um seletor existente. Ampliar suporte aos estilos de impressão em páginas. Os recursos existentes parecem bons, porém tem pouco suporte.",
  "- Control over where scrolling is allowed (eg. within a modal but not behind).\n- Viewport height that actually works with navbars etc.",
  "It is enough, PLEASE STOP with new features for a couple of years!",
  "Simplicity",
  "Standardized Browser Implementation, fewer bugs across browsers",
  "parent selectors!",
  "Multicolumn text that doesn't suck",
  "Including some features preprocessors like Sass have directly in CSS would be a good idea. ",
  "parent selectors ",
  "Container queries",
  "green screen keying of an image",
  "- Targeting sticky elements which are currently fixed (e.g. to add drop-shadow to sticky header).\n- Better modularization / isolation like ES Modules.",
  "Some kind of unified way to do things, CSS currently has too many features which overlap and clash making learning and cooperating on projects difficult",
  "responsive components (media-queries based on component, not screen width, grid makes this a bit somewhat possible, but not perfect)",
  "element/container queries",
  "more love and a restriction order from JS 🤮. Seriously, flex-gap! I know thats a stuff already, but its sad that the BROWSERS are too slow, CSS need more browser proactivity (or to be free of him? maybe, is it possible? 🤯)",
  "Viewport-smart type control of widows and orphans etc ",
  "container queries, parent selector",
  "I'm happy with where CSS is at. I wish clients would move on from Internet Explorer so we can better take advantage of it.",
  "Element queries, styling form elements",
  "Container queries",
  "scroll-priority (like z-index, but for scrolling a parent all the way before its child starts scrolling)",
  "better selectors for specific use cases (previous sibling, etc.)",
  "Linters that warn you if you’re overwriting unrelated styles",
  "Proportionate sizing of box-sized items, without a hacky width, 0 height, vertical padding %.",
  "functions, Herencia",
  "better grid support",
  "A clean and performant bridge between js and css",
  "Good typed CSS options",
  "Element/Container queries",
  "Funciones e iteraciones, bucles",
  "I don't think this is the fault of CSS, but I'd love to see more sites have light/dark modes.",
  "Aspect ratio rule (that one is coming at some point as far as I know)\nMaybe container queries\nAnimating/transitioning to \"auto\" height/width",
  "Tailwind",
  "Container Queries",
  "Chaque transform (translate, rotate, etc) sur une propriété différente",
  "Understanding of it",
  "state pseudoselectors for buttons, an \"up\" selector & previous sibling selector, a make this it's own world property (aka: cut all inheritance & make it it's own rendering context)",
  "Easily accessible info on advanced CSS - The stuff that teaches what CSS-in-JS naysayers claim is easy if you just know how...",
  "conditionals",
  "Nesting, list and map features",
  "Subgrid, Container queries, Mixing floats with grid",
  "Presentational logic and mixins",
  "Nesting, direction media query\nContainer size media query\nAspect ratio \nDefine css class with js natively",
  "SASS-style nesting as a means of managing selector complexity",
  "Improved modularity and scoping",
  "Component Queries",
  "Container queries",
  "Container queries",
  "Your mom",
  "Better tooling and integration, at the level of normal programming languages",
  "CSS Polyfill ",
  "container query, modular css that is not affected by other css on the page",
  "more features adopted by browsers in order to have less hacky situations",
  "Would be great if we could nest pseudoelements and pseudoclasses instead of writing whole selector again. That's the main reason I'm using SCSS.\nAlso variables for selectors. We could avoid nesting elements if something like\n```\n@selector card .card-component;\n${card}__text {\n  color: red\n}\n```\nwould exist. Something like custom media queries which are still missing.",
  "Native local styles, without shadow hassle. Something like postcss modules.\nAnother styling language altogether would be awesome as well. Perhaps with seperation of the concerns of structure and decoration.",
  "Container queries",
  "I would like to see safari and apple console support openly support css like android and browsers",
  "Native encapsulation",
  "Container Queries",
  "Parent/ancestor selectors, container queries",
  "Nesting like in sass",
  "Dynamic css generation (client side). Write simple loops to generate duration / delay utilities instead of having them hardcoded and increasing file sizes needlessly.",
  "theming, mixins",
  "Container queries",
  "More browser support",
  "Turing completeness ",
  "Nesting\nparent selectors",
  "Constraints similar to iOS would be really cool to see on the web.",
  "Determing the parent classes of a class.",
  "very specific and arbitrary: grid row/column selectors",
  "Ability to align nodes that are far apart in the DOM",
  "Being able to blur content behind an element.\nA parent selector.\nAnimated gradients.",
  "text-balance, cascading font feature settings",
  ":state() for custom elements (AKA custom pseudo-classes).",
  "Parent selectors ( e.g. :has() )",
  "\"not\" selectors, e.g.: #container > !p {} -> selector for all direct descendants of #container that are not a paragraph",
  "Container queries ",
  "previous element selector",
  "A standard way of doing multiline ellipsis\nParent selectors\nContainer queries",
  "container queries",
  "Container queries, select elements with highly custom styles.",
  "mayor compatibilidad en todos los navegadores",
  "Variables - needs to work in more browsers\n\nIf statements as well",
  "Everything exists I could ever want, it's more about how do you scale it in a reasonable way.",
  "Nesting declaration blocks that build off the outer declaration's selector, like in Sass/Less.",
  "Anything to improve awareness and experience for users who rely on assistive technology",
  "Print Paged Media & Generated Content",
  "Better support for non-rectangular elements (e.g. polygon with drop-shadows)",
  "Advocacy from Software Engineers and more support for those who avoid it or do not currently care to write or learn how to write CSS that works well for their site/application.",
  "container queries",
  "I would love to see more functional programming in CSS, similar to creating mixins in SASS.",
  "The opposite of + and ~ selectors.",
  "I wish I could use CSS in native applications without Electron.",
  "More logic",
  "Element queries.",
  "range selectors, bigger then to e.g. determine scroll position of page, getting information about the height of elements to do calculations with it",
  "container queries",
  "Variables like in SCSS",
  "flow control statements",
  "Line clamp supported fully with Ellipsis",
  "Better animation. More options to match designs, like more options with background images. Better usage of SVG. ",
  "More standardisation around font-rendering and more support around type and text formatting related features.",
  "Native workflow.",
  "something to select the parent element",
  "Better CSS-in-JS solutions.\nNative Web API fo JS.",
  "Container queries\nNesting",
  "Reverse access from child selector to parent selector",
  "scoping",
  "better error detection or organization tools",
  "Container queries",
  "parent selectors",
  "A bit of programming logics to make it more reusable and logical.",
  "Breakpoints based on parent width/height",
  "Container queries.",
  "SUBGRID!!!! Float top and bottom. Aspect Ratio. Container Queries.",
  "Container Queries",
  "Coherence between browsers and a parent selector.",
  "Parent combinator",
  "I'd like to see the core CSS specification evolve and browser adoption move more quickly. A variety of CSS frameworks, methodologies, and approaches exist nowadays. It can be quite difficult to determine which to choose. There's not enough time to experiment with each CSS tool, so I'm looking forward to discovering what the general community seems to champion. Additionally, I would like to see the following specific features in core CSS: border gradient, standardization of grid/flexbox gap.",
  "scope without shadow dom or css in js, container queries",
  "Container Queries",
  "Clarity about the best way to achieve something (e.g. center vertically)",
  ":checked-within pseudo selector similar to :focus-within",
  "Proper aspect ratio handling.",
  "parent selection",
  "a reduction in techniques...simplification is missing",
  "more direct and succinct ways to do what already exists, instead of new complicated ways to do what already can be done (ex.: flexbox vs grid)",
  "Maybe some \"smart\" or automation features such as: easy way of looping; conditional statements; parent selector; nesting (from preprocessors)",
  "Any utilities based on calculation between different objects \n\ncalc(.mycomponent.width * 5)",
  "A simple way to center things",
  "Easy way to unset all properties on an element so that it is totally unaffected by styles defined above it.",
  "\n1. Nesting 2. Container queries",
  "Styling based on prev sibling / child.\nElement / container queries.",
  "container queries / element queries, allow variables for media queries",
  "Select elements before another element.\nUse something like color-gamut to simulate color blindness, or provide a high-contrast theme for people that have that option ON.",
  "transition to auto height or width\nmore powerful calc\ncolor functions like fade and lighten",
  "Not at all",
  "Полноценной поддержки без \"костылей\" flex и grid, и в целом своевременной и полноценной поддержки новых свойств и возможностей всеми браузерами.",
  "parent selector",
  "A comprehensive way to redefine styles even if they are bonded to a specific state of the element.",
  "Feedback for features that do not work on a given browser range (i.e. a linter that evaluates a file against a browserlist)",
  "Colour functions",
  "mixins",
  "Shape-inside, once we figure out what to do with overflow. Regions would be great, they're related.",
  "Improvements in SASS/SCSS",
  "Container queries and flex behaviour on input fields",
  "Easy polyfills. We must support old browsers like IE11.",
  "Verschachtelung",
  "selecting SVG parts and an easier way to create animations",
  "un keyword para width y height, no veo sentido tener ambas propiedades con el mismo tamaño.",
  "Parent selectors",
  "container queries",
  "Cycles, better integration with JS",
  "container queries",
  "Houdini",
  "Subgrid ",
  "Parent selectors, as impossible as it may seem!",
  "Container queries",
  "Component dimensions media query",
  "The line-clamp property with ellipsis that can be supported in all browsers. Currently it's only in Chrome.",
  "Subgrid",
  "Houdini\nContainer queries",
  "Container queries & be more component-focused",
  "Container Queries ",
  "Parent selector",
  "Fast adaptation",
  "selector nesting, container mediaqueries",
  "Recognition as a real skill among web developers.",
  "Universal browser support for everything",
  "faster adoption of new features by browsers.",
  "Better gap support for flexbox.",
  "Hard one, but right now, if I had to pick one, it'd be the ascending selector. \n\nLike, target the parent of an element. \n\n:parent-nth(.item, 1) {}\n\nwould target the 1st parent of .item",
  "scope",
  "Regions",
  "Sass like features: @each etc.",
  "animation before element removal",
  ":parent, :content (либо content() function)",
  "sass should just be in browser at this point.",
  "Что Гапы начали работать везде",
  "CSS has needed a parent selector ( input:checked < .parent ) for like a decade now.",
  "nth-of-class() selector",
  "Simplicity",
  "Variables",
  "better cross platform newer features",
  "Possibility to align components in relation to other components",
  "Breakpoint priorities/preferences breakpoints\nMore efficient sizing and positioning system",
  "Scoping, Container Queries, Native CSS Modules",
  "More layout modes in the vein of flex and grid, widespread Houdini support for custom layouts",
  "Rapid adoption of new selectors and patterns by all modern browsers",
  "Organisation avec nested\n",
  "html content reaction (empty, grid masonry, text-overflow multiline",
  "container media queries",
  "Parent selectors, element queries",
  "loops and if statements",
  "Parent selectors",
  "No clear concise direction/standard",
  "align-content support in 'display: block'",
  ":has() selector",
  "Container queries",
  "CSS seems daunting and overwhelming due to the amount of information out there.",
  "Subgrid and column rows something",
  "Functions",
  "Container queries and the ability to target a selector which has a child state (so that you can target the parent element in a currently selected menu item for example, think of it as a :has selector)",
  "scoped styles that don't bleed out to global namespace.\n",
  "Predefined screen-size breakpoints and the ability to use them in a selector (.foo$mobile-normal,.foo$desktop, etc) ",
  "- CSS color-mod()\n- CSS Variables in Media Queries\n- Boolean / if statements with CSS variables\n",
  "I think browsers need to standardize rendering so we don't have to make browser specific fixes.",
  "container-queries, shadow-parts, /deep/ or some of the successors",
  "I've found pain points from CSS grid not being able to dynamically define sizes based on content, would be awesome to have that be possible",
  "Container queries",
  "element queries, accessible responsive font sizing (clamp doesn't quite cut it)",
  "cross platform",
  "Less, sass, etc. should be adopted by css and become more streamlined.",
  "Antecessor",
  "Parent selector",
  "Better naming of properties.",
  "Support in all the browsers",
  "Parent selectors",
  "container queries",
  "Better support for :has(...).\nColor math.\nNesting, like in SASS.\n",
  "color functions, subgrid support everywhere",
  "With modern web apps it is simple not the best way to define and structure an application. Something like XAML used to be way faster to layout and style a page IMO.",
  ".foo < .bar",
  "Container queries",
  "shapes",
  ":has() or some kind of parent selector. A previous sibling selector. Also non-js HTML imports (not css related i know)",
  "ascendant selectors",
  "Parent selectors",
  "select a parent element",
  "Container queries, selector nesting for pseudo elements/pseudo classes",
  "the use of the height of a sibling element",
  "Accessibility support for responsive typography!",
  "Container queries",
  "Container queries, SCSS Style Variables, Nesting, Mixins, Partials & @imports",
  "parent selectors",
  "CSS variable groups, like sass @mixin.",
  "More flexible layouts",
  "Container queries (we're still waiting)\n",
  ":nth-character selector would be really great to have",
  "How to adopt new things in old browsers like IE11",
  "Styling form controls (select, checkboxes, radios, ...).",
  "Better control of colours and shades",
  "css containment (based on parent)",
  "nesting by indentation, more advanced variables – basically, i'd love to see vanilla CSS take on what SASS is capable of ",
  "Death of IE11 - otherwise nothing new can be used in production.",
  "No pre-processors dependency for big projects",
  "module separations, url selectors(host, search, hashtags...), center utilities (flexbox rules this)",
  "Reliability across browsers",
  "Full function support, built in mixins",
  "unsure",
  ":battery-saver",
  "Container queries! They're coming someday, right?",
  "Nested selectors ala SASS",
  "Parent selectors; accessibility-friendly features; positioning shorthands; more interop w/ JS ",
  "Container queries",
  "Container queries.",
  "Parent selector",
  "more control over form UI",
  "Native Module System",
  "currentBackground",
  "adding more complex calculations, \nfor example getting a width/height... from another unrelated element (class, element, id)",
  "respond to events maybe",
  "Gender equality",
  "Not so much a feature, but it's hard to find good resources these days on how to do proper modern css. Stackoverflow is filled with old old hackish ways of doing things, and it's way too easy for people to copy/paste these solutions without realising there are much better alternatives now.",
  "nesting",
  "Multi line ellipsis. Parent selectors",
  "More support for regularly coded features like sticky, parallax, show/hide",
  "proper handling of 100vh value",
  "Higher salaries.",
  "trigonometric functions for transitions",
  "better selectors and a way to recognize if a selector already exists.",
  "свободы",
  "Browsers still taking too long to support the new features.",
  "Media queries inside nodes",
  "Container queries",
  "container queries",
  "Parent Selectors",
  "Houdini availability",
  "Equivalent Browser Support",
  "people that actually want to learn and write it",
  "media queries at component level (like \".my-div max-width\")",
  "Stylování nativního podtržení textu",
  "Extensibility (via Houdini, etc.) and polyfills.",
  "Everything you have in JS",
  "Better centering.",
  "Logic",
  "Container queries",
  "Parent selectors!",
  "I'd like to see plain css become a combination of SASS/SCSS and Styled Components",
  "Debugging options for variables. How do I know that I made a mistake in calc() for example? Or made a mistake in referring to a CSS variable? ",
  "an easier way to debug",
  "Scoped Styles",
  "parent selector",
  "nesting",
  "container queries, previous sibling selector",
  "Parent selector\nMore math calculations",
  "Consistency across browsers ",
  "A proper way to style form elements, like checkboxes.",
  "Ease of cross browser support similar to Babel/web pack/etc. I want to write the new techniques and have it produce IE11(crap) compatible CSS even if it has to do more than just add browser selectors. ",
  "Hierarchical definitions like in scss.",
  "A developer community that knows how to use correctly.",
  "CSS needs to fix old stuff (Scroll Snap on sub pixel dimensions, gap in Flex etc) before adding new features.",
  "transition height auto",
  "custom functions",
  "Masonry (Pintrest) style layout.",
  "Order and clarity. It has become a pure mess. For the sake of retro compatibility, they have stacked tons of different new props on others which are kind of obsolete. ",
  "parent selector",
  "Container queries",
  "Parent selectors",
  "none",
  "break retrocompatibility to be intuitive without having to know implementation details",
  "More simplicity",
  "Scoping without nested selectors. Being less verbale (resets for exemple).",
  "Nested BEM selectors",
  "Way too many iOS Safari bugs!",
  "1. clear and easy traversing/styling things upwards the DOM-tree/preceding what the selector matches\n2. reading computed results of attributes (especially those manipulated or generated by Javascript, outside the HTML standard)",
  "container queries",
  "Positioning an element with respect to any another element, regardless of their mutual relationship or their positions in the DOM.\n\nAnd the obligatory response to this question: Container queries.",
  "parent selector",
  "parent-Selektor, würde sehr viel js sparen",
  "consensus",
  "Component-based media queries (ie: if this div is this width, implement these styles)",
  "logic (if/else)",
  "style a parent element - based on child selector, select element based on text content",
  "directly style checkbox/radio/select",
  "parent selector??",
  "Internet explorer 11!!!",
  "Houdini would fill the gap",
  "Just better browser support for existing features.",
  "CSS has grown to a gray area of being between a styling language for visual presentation and scripting. I think CSS is missing a consistent, basic approach. I don't think CSS should be as complicated as it has become. It's missing its core purpose. ",
  "Parent Selectors",
  "Support for more Houdini features and leading-trim!",
  "container queries",
  "There's way too many options nowadays. Deprecations are the most needed thing so that it becomes clear to new devs and also experienced devs what to choose and when.",
  "selector for the label of a specific form element, i.e., label:for(:active) or label:for(:invalid). Parent/container selector, i.e. p ^ div (select the \"div\" that contains this \"p\")",
  "Container queries",
  "changing the rule name 'color' to 'text-color' and jsx and all this js-in-css-fucking-shit abomination to oblivion.",
  "parent selector",
  "Container Queries",
  "functions, I mean any sort of functions not just a few pre-built ones",
  "Anything that gives more power to create layouts easier and more usage for variables.",
  "Element queries",
  "Ability to climb (going back up) the DOM tree",
  "The ability to select/style a parent element based on a class/state of a child element. (work up the chain instead of exclusively working down.)",
  "Native support for nested selectors",
  "container queries",
  ":nth-of-class. Do we have that?",
  "* A way to separate box level and box content. Imagine display is a shorthand that can be split, removing values like inline-block and inline-flex.\n\n* Scale (changing) text to fill block box is a problem I recently failed to find elegant solution for.",
  "variables",
  "Mehr Interaktionen, die derzeit noch über Javascript gehandhabt werden. Mehr accessibility features",
  "Container queries",
  "A visual editor",
  "more colors",
  "functions and logic ",
  "Parent selector",
  "Container queries, but in general I'm happy",
  "parent selector\nsingle letter styling",
  "Features to work with videos, image and typography without the need to write a lot of browser-specific code.",
  "Parent selectors",
  "*Standardized* multiline clamp. Sick of -webkit-box.",
  "Nesting",
  "Better accessibility from Javascript. Programmatic styling sometimes feels like it takes way more effort than should be needed. ",
  "color functions",
  "changeable variables (custom variables)",
  "Atomic CSS us the wrong approach\nSeparation of concerns is important",
  "Container queries, a true way to hide text for assistive technologies/screen readers that isn't a hack",
  "Better content responsive styling",
  "form controls customization",
  "theming",
  "parent selector",
  "Nesting",
  ":parent",
  "Easier ways of styling bullet points, scrollbars, range sliders & checkboxes without resorting to hiding the element visually and creating an element in css.",
  "Dynamic ",
  "Parent selector, styliser plus facilement les élements de formulaire tels que les select, les checkbox et les radio",
  "Parent selector, parent/element media queries",
  "More pseudo-selectors like ::last-line would be really useful",
  "Возможность движения вверх",
  "Custom scrollbars\nNesting rules (like in SCSS)",
  "SASS-like functionality without the need for preprocessors.",
  "A way to detect if text has wrapped and apply different styles to it ",
  "Optional scoping to prevent style leakage. I'm a fan of global styles, however sometimes scoping is required. ",
  "Layout a content block, then scale it to fit a defined size. For example, if I had 3 paragraphs, I could scale the block containing the paragraphs to fit within another specified block size.",
  "Container queries",
  "Child selector",
  "Target previous sibling ",
  "Containerqueries, exchangeability of values/variables between css and js",
  "Container queries, better aspect ratio support.",
  "A common way to do things, like a standard",
  "Logic Operators as IF ELSE FOR WHERE etc",
  "Generic scoped styling, nth-of-class or similar selector. Parent element selector.",
  "Select sibling element before element.",
  "Good tutorials (not just examples).",
  "find the direct precedent sibling",
  "scope",
  "Lack of support for Paint API",
  ":parent() selector",
  "Container queries",
  "more units contextually aware of bounding constraints.",
  "Making things easier to work cross browser consistently.",
  "More selectors",
  "scopes, ability to use JS variables inside CSS",
  "Select the parent element or select the elements before a child",
  "More control/interaction with JavaScript.",
  "Native scoping, native nesting, something that would support styling components natively with seamless DX",
  "A way to select previous element.\nUsing data attribute as values.",
  "Aligning <div> vertically",
  "mixins, colour functions, nesting selectors (like in Sass)",
  "Nesting like sass (&) ",
  "A module import system",
  "Better text handling, like the amount of thing indesign provide to graphic designers.",
  "that thing with the line-height. Can't wait",
  "Previous sibling selector. Parent selector.",
  "Ability to specify block size as a percent of its width – or any other easy way to maintain box aspect ratio. In general, CSS lacks flexibility in property values. You can't reference any properties from parent and use them in computation, things like min() max() were added recently and don't have enough browser support yet.\nAlso, SASS-like nesting would be nice to have natively in CSS.",
  "Not innovative enough. Too many unknown properties. Doing this survey makes me feel CSS is full of magic and so bloat. No winner in workflow that improve developer life. Too many ways to setup CSS in different projects. In general, unhappy with the current state of CSS.",
  "container queries",
  "Container Queries, ::stuck pseudoselector, declarative CSS for defining shadow DOM without JavaScript",
  "Native nesting",
  "Mixins",
  "Sometimes I think some basic logic would help, but actually feel that this is starting to appear, so not sure I have anything to add here unfortunately",
  "Relative positioning to other elements",
  "parent selectors; :in-viewport pseudo-class",
  "Faster postcss compilation",
  "predictable layout engine for web applications;\nstate, when changing parent layout properties doesn't change child layout;",
  "Container queries",
  "I thinks everything available In css",
  "I am in constant need of an ancestor combinator selector (* < *).",
  "Uniform support",
  "A more granular shadow dom, where i can e.g. define which CSS files should be applied from root (e.g. global grid) and which not (root custom styles)",
  "Interactivity",
  "Not exactly a CSS feature, but I would love to have easy, standard ways to polyfill upcoming CSS features.",
  "Container queries",
  "Vertical centering without verbosity",
  "Container queries",
  "container queries",
  "more programmability",
  "features from SCSS/SASS (e.g. loops, mixins, indented nesting) made native to default CSS",
  "being able to centre things easily!!",
  "Enforced aspect ratios on elements",
  "Container queries",
  "Parent selector.",
  "use CSS transitions with gradients",
  "Element queries, (subgrid)",
  "- color functions\n- container queries\n",
  "parent selectors",
  "a structure that helps me to avoid make cascaded errors/having useless css",
  "native nesting",
  "More uniform naming. The learning curve is too steep",
  "parent selectors",
  "Unified implementation in all browsers",
  "Parent selector",
  "Styling built ins e.g. select",
  "flex gap support",
  "unify all goddamn browsers supports",
  "state handeling to support navigation layout without the need for javascript",
  "Module system",
  "Middle element selector (non-first/last)\nUnderline styling",
  "Line height trimming, but it's coming!!!",
  "Container Queries, Aspect-ratio, Scroll-linked Animations",
  "More preprocessor features like functions",
  "3d, complex variables types",
  "all SASS/SCSS capabilities should be native to css without the preprocessor",
  "Cross browser parity. I spend as much time researching -if- I can use a feature, as I do learning -how- I can use a feature.",
  "Proper Scrollbars",
  "Overriding browser styling. Recent updates like :marker for <li> are great, I want to see more of that.\nParticularly for radio, checkbox, select.\n\nAlso Container Queries",
  "People uae it before learning it.",
  "Container queries",
  ":has() selector",
  "More intuitive, simpler, better positioning. ",
  "parent selector",
  "Flex gap support",
  "Container queries",
  "container queries, an element-level selector for all headings, nesting of media queries\n\nAdjacently, it’d be nice if HTML had a visually-hidden attribute",
  "Styling <select>, global z-order",
  "parent-selectors",
  "grandparent selectors, great-grandparent selectors",
  "- Better ways to deal with responsiveness (eg. using @media controls is clunky sometimes, we need something better that checks for space and organically apply positioning & the right typography. Something like grid but for the whole content imgs, text, video, border, ... and better)\n- position:sticky is awesome but needs an overhaul or a v2 :). It needs to be more powerful eg. space aware. It's clunky or table elements so it needs to be fixed there.\n- !Hear me out! Routes-based selectors:::=;;; With the introduction of new transition property specifically for routes transition. Will unlock great possibilities and make SPAs UX feel or come close to native app like IOS and reduce loaders implementations. We do loaders right now but nobody love loaders 😤\n- Native skeletons if we can't get rid of loaders :)\n- Better ways to manage typography like declaring custom properties/values to designate a specific font variant/weight/color/size/spacing once and use it. Something like font: const/var(--OpenSansHeaderWide).\n- Better ways to deal with colors and contrast ratio. In the same vein as above something like color: constrast-ratio(SafeBlue/SafeWhite/SafeWhite/SafeGrey);\n- Too many small things...",
  "nesting",
  "Element queries, proper physical size units",
  "CSS is fine. Browsers need to all be using the same CSS engine.",
  "Nesting",
  "Subgrid, gap",
  "More native centering tools",
  "Scoping, element queries, mixins, scriptable CSS features",
  "Target parent element selector",
  "Simplicity",
  "Container Queries",
  "Propriedade de background para definir somente parte da uma imagem com repetição.",
  "parent selector & color calculations",
  "Container queries, nesting and mixins",
  "Sub grid, full logical properties support",
  "Support from each browser.",
  "3D features",
  "Browser support",
  "non-broswer specific rules for everything, better variable support",
  "Some form of :has-parent(.some-class) selector ",
  "The nested component structure just like SASS.",
  "container queries!",
  "browser support for new stuff",
  "static types/analysis",
  "More respect for people who write it",
  "sass level nested selectors",
  "Eager for support for marker and aspect-ratio",
  "Although it’s easy to get in a preprocessor, I’d love to be able to compose selectors (e.g. @extends or mixins). My most recent project used no pre-processor, and that’s the only thing I missed.",
  "A solid manipulation with CSSOM and Houdini",
  "Grandparent selectors",
  "Container queries\nGap\nLeading-trim",
  "Nesting",
  "Nesting",
  "Media queries for containers different than the viewport (element queries)",
  "scoping",
  "Nesting",
  "Not something new to CSS, but behavior parity between browsers",
  "Cross browser support for new features",
  ".foo { .bar { @mixin } }",
  "Nesting in vanilla CSS",
  "color functions",
  "A good examples of good usage of different methodologies, a guide of good structure of css code",
  "Better to make stuff responsive. ",
  "Namespaces",
  "Better ability to style HTML \"controls\" such as checkboxes, radio buttons etc.",
  "Parent selectors!!",
  "Performance impact. Clarity in writing good CSS. Writing good layouts. Automated optimization. Targeting parent from child. Cross project usage and maintainability.",
  "Functions, mixins, modules, etc. Basically get to the point where we don't need Sass.",
  "overflow-top/right/bottom/left",
  "Scroll bar customization, form control customization, positioning outside the scrollbar area.",
  "Basically the sass feature to have the classes inside eachother. You know this:\n\n.foo{\nstyle here\n    .bar{\n     specifik style here\n     }\n}",
  "A complete reboot",
  "Use-case of most of the properties is very limited. I hate debugging in css. Its hard to catch overrides most of the time.",
  "parent selector",
  "Především cross-browser support valné většiny atributů, FF je zoufalství, prizom ho stále musíme podporovat. ",
  "scoped css, more scss features in native css, like nesting and logical statements",
  "- Custom properties for media query widths e.g. `@media (max-width: var(--media-mobile))`. Think there's something in the spec for using `env()` to do this\n- Animating gradients (Houdini solves this so I guess all major browsers supporting Houdini)\n- Color manipulation, like fading, darkening, mixing etc found in preprocessors",
  "Styling native input elements (yes, we're still waiting)",
  "More sophisticated namespacing. ",
  "Container Queries",
  "CSS functions (lighten, darken, rgb2hex, rgb2hsl etc),\nElement queries",
  "less dependency on global variables",
  "If ... else ...",
  "Обработка клика)",
  "container queries",
  "custom functions (make it more a programming language)",
  "Logical operators and other things inherent in the programming language",
  "parent selector",
  "Container queries",
  "Subgrids, custom properties in @media conditions, nesting, mixins, loops, total annihilation of Internet Explorer.",
  "Element Queries / Container queries",
  "Better SVG Css Support",
  "The ability to target a parent selector and/or access to DOM",
  "Not a feature, but I realized from taking this survey that I'm ignorant to much of the current CSS world, and don't know how I missed out on it / what blogs/communities/etc I should have been paying attention to",
  "A parent selector",
  "Toggle to play animations when element enters viewport.",
  "ease in its structure.",
  "CSS revert keyword, more pseudo elements, nesting, parent selector, math functions like sin(), cos(), etc.",
  "Not freedom enough, everything is squares - or at least starts that way. ",
  "scoped styles support, styles of parent depending on child class",
  "Rich editing on browser (Chrome) to be reflected on code afterwards",
  "Overall better browser support",
  "Nesting",
  "Container queries, color manipulation (hex to rgb, darken, lighten)",
  "ability to select parent nodes (parent selectors)",
  "gaps in flexes",
  "Container Queries, Shape-Inside/Exclusions, Regions, Color mod functions",
  "a feature that sets off a klaxon saying: don't use this yet, not enough browsers support it",
  ":has()",
  "Parent selector, previous sibling selector ",
  "Better constancy and better support for css. No more vendor css",
  "fully featured Houdini",
  "A better way to insert JS variables so that we can write CSS but also avoid css-in-js...ugh... nasty stuff.",
  "nesting without a preprocessor",
  "Better blur and other effect filters, easier alignment options, better ways to make shapes!!!",
  "Good print support",
  "Teaching around web accessibility and CSS",
  "Better ways to scope or namespace CSS.",
  "Logical operations with for",
  "container queries, subgrid",
  "More Conditional statements: if hover/interact on one element, do something to another element.",
  "not so much css, but the web platform as a whole needs proper semantic UI components. We shouldn't have to use all of these JS frameworks and introduce more bugs, problems and complexity into the web platform. UI components need to be native with the ability to pass data into a component in a standardized format, and then define properties that effect the look and layout of the component with styling adding minimal effect tot he look and feel. styling is taking on too big of a role in the web platform. the web was a supposed to be a place that anyone could build on, but we have made it so complex that we have restricted that ability to a select group.",
  "A way to get a reference to  the parent component or walk up the DOM tree",
  "Loops, same behavior for variables/counters/attr",
  "More content flow control",
  "Container queries, nesting, ability to use CSS variables \"statically\" (ex. as @media query properties), color / hue adjustment (ex. yielding a dark red from a red hexcode).",
  "Subgrid",
  "native isolation solution",
  "logic",
  "dynamic (contain) font-sizes\ndynamic (contrast) colors",
  "Aspect ratio",
  "JS-in-CSS or selecting elements based on child attributes.",
  "More robust usage of CSS-vars, data attribute values in more than the content property ",
  "Consistency across browsers when it comes to supported features.",
  "Looping/intelligent increments for things like transition/animation delays",
  "Looking forward to leading-trim, and to get better browser support for things aspect-ratio, so that they may be used in production.",
  "anchoring elements in relations to other elements (.box2 { width: as(.box1), y: calc(as(.box1) + 5px) }",
  "Height inheritance",
  "I have never thought too much on this. But going to give it some thought!",
  "Separated transform properties (scale, rotate...)",
  "la coscienza da parte degli sviluppatori che il css ha la stessa o maggior importanza del js, che l'utente del web prima guarda il sito e poi lo usa. Il CSS se non organizzato e senza le basi (specificità, analisi e organizzazione) è molto più complesso del javascript",
  "Lookbehind, or more features like \"focus-within\". Native nesting, basically any features from SASS being native - it's been 10 years!",
  "Simple ways to control shapes are always limited to squares, circles and rounded shapes. cutting at the edges would be a great addition, as would the diamond shape.",
  "Container queries",
  "parent element selector",
  "Стилизация элементов форм, особенно селектов",
  "Subgrid will be a great addition.",
  "parent selector",
  "Ability to select parent similarly to how we select child",
  "Allowing media queries and pseudo-classes in inline styles, so we no longer need utility CSS classes.",
  "People who actually know how to use is.",
  "JS",
  "Parent selector",
  "Multi line ellipsis support on all browsers",
  "better developers other than me",
  "Container query, container query, container query, and container query. ",
  "text stroke as it works in Illustrator or Photoshop",
  "Хороших инструментов отладки",
  "reset all styles for selectors",
  ":has()",
  "context awareness",
  "A logical naming convention for a lot of its properties.",
  "A proper module (dependency management) system similar to ES Modules.",
  "Constraints! ",
  "best practise, unified solution",
  "Styles encapsulation without JS (like shadow DOM and CSS-in-JS)",
  "Container selector, ",
  "Better color manipulation.",
  "Still browser stability",
  "Wide acceptance of css variables",
  "There is not enough support for CSS Grid and Filters/ Blend modes etc across browsers.\n\nI think the general compatibility across even modern browsers isn't sufficient for new technologies, therefore Chrome etc can only be the one true browser to use new technologies with.\nOf course if we had to support an older browser such as IE10 (older), we still couldn't use these shiny new technologies because it would break.\n\nAs of yet I am unsure of what media queries we can use to produce different styles for older browsers only.",
  "Nesting",
  "expansion of calculated styles and variables",
  "More solid standard cross-browser compatibility",
  "Container queries",
  "Parent Selectors",
  "Container queries",
  "Native support for vars and most other SASS functionality",
  "documentation, tutorials, too many frameworks",
  "Native nesting syntax (scss style)",
  "Idiomatic patterns. CSS suffers from too much freedom in the same way JS does. Although there are benefits to this, it lacks the consistent style that many other languages have and enforcing this through linting becomes too important.",
  "Возможность управлять родительским элементом от лица дочернего. ",
  "Container queries",
  "The ability to draw a line joining 2 elements without knowing their position in advance. Designers do this all the time, and there's no good way to achieve it.",
  "I want to have an equivilant to vh / vw but instead of pointing to the window it point size of the component itself. And then I want to use this for media breakpoints for that specific component.\n\nThis way I can let a component look a certain way based on the size or the size it has available to itself.\nInstead of having to do it on window size which can differ per different instance I implement it.",
  "Container queries! ",
  "select parent",
  "Fully featured edit mode styling. IE when content-editable is set to true, bringing able to style the grabbers on the corners of an element etc.",
  "Container queries",
  "Vast support for container queries.",
  "svg and filters working together",
  "Better support for print rendering (widows, orphans, columns, callouts, etc.) so that we can generate sophisticated print documents without LaTeX or XSL:FO.",
  "A feature that could calculate the height of the element. Similar like jquery(.height) ",
  "Container queries, ",
  "Container queries ",
  "build it css module",
  "The only thing that's truly missing is respect for the language and respect for the standards process in the community, esp. among React developers. They aren't even close to using CSS to its full potential and keep asking for features that they then ignore.\n\nThere is actually very little wrong with the web stack today. It's the developer community that is utterly and totally dysfunctional. Education is entirely geared towards employment and managers are utterly clueless about what they want in employees leading to a spiralling loop of dysfunctional training and counterproductive practices. You can make _amazing_ apps using the web stack as it is. But it's more important to companies that they use React than it is to make profitable products. (Dysfunctional funding and poor management training is to blame for a lot of this.)\n\nIn the web's defence, native app development is also largely dysfunctional.",
  "container queries",
  "Media queries for single elements / containers. Better support for gap property for flexbox.",
  "Cross browser consistency",
  "Container queries, LAB colourspace support",
  "Easy vertical centering, ellipsis on multiline text (have the ellipsis after x number of lines)",
  "Container queries",
  "Native browser support for CSS Modules ... somehow.",
  "container queries, lol",
  "parent selectors",
  "More support for using standard CSS variables rather than preprocessors like SASS.",
  "Be able to Animate gradients. Shape-insidr, exclusions actually implemented",
  "CSS and JavaScript completely replaced with a new front-end language that is more like a modern typed language",
  "Solid line clamping options",
  "Better CSS variables, the current implementation is lacking compared to preprocessors like SASS",
  "A nice way to style SVG nested in HTML.",
  "on smartphones, there are no easy options to do things that are possible in native apps (android, ios). Examples include smooth animations, draggable panes (that actually scroll) etc.",
  "accessibility feature (pointer-events: none is by screen readers). \nhandle focus from CSS",
  "Container queries",
  "Constraint based layouts",
  "it being rendered the same in every known browser",
  "The :has() selector so we can avoid using JS for a lot of dynamic functionality.",
  "typography systems",
  "父層選擇器",
  "constructible stylesheets",
  "logical styling, aspect-ratio",
  "Customizing native form controls",
  "Simplicity, structure",
  "An alternative to @apply",
  "Tailwind filled the gap for me for writing CSS. Learning all the semantics for complex styling needs and maintaining huge mountains of CSS for my HTML to hook into, even with something like BEM, was painful and slow. Tailwind has sped up my development process immensely and made styling my web apps easy, maintainable, and fun :-)",
  "has-parent",
  "Container queries",
  "better naming things",
  "version due to Css being in one version and with a a lot of updates makes no since for new comers they want a place to see change-logs too see deprecated things new things and examples and much more i know that we have MDN & w3schools but it is huge resource ",
  "I just want all browsers to support features equally. For example, Safari still doesn't fully support CSS clamp() function. And the way Chrome and Firefox supports -webkit-line-clamp are different, i.e. while Chrome supports using line-clamp on parent element, Firefox breaks the UI. It must be strictly used on the element. So yeah, just want all browsers to support the existing features all fair, square and equally.",
  "More features from Scss",
  "Native (non-tacky) sticky headers for tables",
  "I'd be greateful if I could select the parent of a class.\nExample: if I have some custom class \"custom-class-child\" and it's a child element and I don't know who is his parent I want to be able to get it.",
  "Х.з.",
  "container (element) queries",
  "easier styling of native html elements with cross-browser support",
  "- Actual print supports (with header/footer management, no hacks required, and ability to specify default for most print settings)\n- Container media queries, so we can stop using resize observer in JS\n- Grid level 2 everywhere",
  "Element Queries",
  "container queries",
  "Programmatic functionality such as loops.",
  "SVG based animations without JavaScript updates",
  "Better form controls styling",
  "parent selector, but I know there are concerns",
  ":has(). Better support for logical properties. Quicker implementation of flexbox gap. better line overflow (...) functionality.",
  "Better tooling and control over Javascript.",
  "variables",
  "Container-queries",
  "Container queries",
  "Better colour management",
  "shorthand for position top/left/bottom/right",
  "Nesting of rules just like SASS",
  "A standard about usuals animations and transitions. Like material animations and transitions. ",
  "Parent Selector",
  "Element/container queries",
  "parent selectors",
  "Parent selectors",
  "Quicker support for newer features (I would like for it to basically do what SASS does)",
  "Ability to style form elements without hacks",
  "Reduced stylesheet bloat.",
  "Better animation primitives",
  "Full touch events support",
  "inline media query",
  "Nesting!",
  "My kingdom for a way to target a parent element by an action on a child element.  There have been a handful of times when this would've made my life so much easier lol.",
  "predictability",
  "Element queries",
  "native scoped css",
  "Cross browser compatibility (fully)",
  "I think we should stop the JS in CSS trend and make the react JS brats learn it properly. I know its not a property but I need to say it LOL",
  "Understanding from the frontend community as a more powerful and resilient solution for most of the web challenges. Focus is too much on JS. ",
  "Browser Support",
  "parent selector",
  "The interaction between rules are very complicated to understand and so to handle perfectly. It should exists one tool that show interaction between rules to understand the behavior of UI in browser.",
  "If statements",
  "functions, better scopes, events",
  "Even easier support for older browsers",
  "- simple if logic\n- mixins",
  "Parent selectors from a child",
  "Simple vertical height and centering without gimmicks!",
  "CSS Houdini support",
  "nesting, :has()",
  "nesting, container queries, browser page transitions",
  "Container queries, :is, :where, :matches and parent selectors (improbable, I know).",
  "Easy to understand Standards, Conventions or Best Practices.",
  "Print-level (InDesign) hyphenation control. Container queries. ",
  "Obvious ones being container queries and parent selectors.",
  "Target the parent if child is",
  "- Ability to select parent elements.\n- Wider support for blend modes.\n- A consistent way for creating layouts (stop the flexbox vs grid battle!).\n- I use to use flexbox, though I still find it confusing.",
  "container queries",
  "sass like nesting in vanilla css",
  "Cohesion. One code base to rule them all. Solutions keep coming around to fix old problems but are so difficult they take forever to learn.",
  "Higher level dynamic functions. Interpolating attr values as property values, or use in calc etc",
  "Container queries\nBetter cross browser support",
  "unified tooling among the various pre-processor/utility-first/css-in-js",
  "Parent Selector !!!!!!",
  "cross browser support of mature features",
  "Container Queries!",
  "input styling",
  "more ways to add neat effects (like hue-rotate and friends) or masks or w/e against images, especially if they're things like background images, without having to stuff content in a pseudo element",
  "I want it works equal in all browsers",
  "Parent Selectors",
  "More support for native web styles in Android and Outlook email clients. Wider adoption of modern styles for email clients, such as animation. ",
  "Container queries ",
  "Reset CSS and start from scratch",
  "Nesting, mixins.",
  "Logic Statements",
  "More complex selectors (parent selectors), better/more ways to keep styles encapsulated. ",
  "Treeshaking based on usage",
  "version control–specifying a version so that you app doesnt change style over time",
  "Unity among browser support",
  "Container queries",
  "Bugfixes in columns, height transitions from auto to fixed. ",
  "Everything that can replace JS features.",
  "Container queries",
  "vh vw for divs",
  "A way to track how far the user has scrolled.",
  "animaciones avanzadas SVG",
  "simplicity",
  "Custom selectors (Variables for selectors)",
  "CSS Nesting Module",
  "motion blur",
  "better SVG handling",
  "I personally find it pretty difficult to find out why something is overflowing when it shouldn't. It would be nice to have a concrete set of rules that are universal regarding this. There seem to be too many edge cases.",
  "CSS variables in media queries",
  "Element queries",
  "Container Queries",
  "Container queries! I'd also like to have a way to use variables in media queries (maybe that's coming?).",
  "Color manipulation and LAB color",
  "no",
  "Container queries",
  "Lógica más potente, funciones (lighten, darken...), Subgrids, container queries, Character-length queries, Posicionar popovers sin necesidad de emplear JS para calcular distancias (necesario en capas con overflow:hidden).",
  "parent selectors",
  "Structured, compact documentation, w3c-long reads.\nBest practices, standart structure of css. CSS architecture",
  "selector nesting, color functions, custom property \"if\" statements",
  "Functions and mixins",
  "Не хватает быстрой доступности новых свойств во всех браузерах и единства свойств не хватает во всех браузерах",
  "∙ Container Queries, of course (but I understand why that's hard)\n∙ Global styles that can optionally pierce the Shadow DOM boundary... not ::part and ::theme and not just custom properties (I want to be able to style plain HTML elements, such as inputs, inside shadow roots, without having to specify every possible property as a custom property or part.)\n∙ Native CSS nesting of blocks\n∙ The ability for Custom Elements to set the state of common pseudoclasses (I want to style all :disabled things some way, even if they are custom elements.)\n∙ The ability to use attr() as a value anywhere, which would save having to introduce custom properties and Javascript in certain places\n∙ Expose the number of children of an element and the index of an element in its parent as function values (e.g. n() or index() and children()) for use in calc() expressions, which would reduce needing to declare a long list of :nth-child() selectors (or preprocessor loops), when we're really just computing or incrementing an expression by the n.",
  "Support for vertical typographic rhythm, better algorithm for text justification, container queries, analogy of custom properties for media queries",
  "Une bonne gestion de la 3D. Les mêmes fonctionnalités que les pré-processeurs sans pré-processeurs :)",
  "Better browser support for current standards",
  "Ascenders",
  "Funciones de color, tener un color principal y poder jugar con él para conseguir variaciones desde el propio navegador sería genial. Y subgrid, pero eso está más cerca.",
  "Generally speaking, Percentages don’t calculate well along the vertical axis.",
  "sass is cool, less is cool\npostcss is cool",
  "no idea, not sure",
  "Clean up",
  "Container queries!!! 😂",
  "user defined functions\nnesting",
  "Explicitly author-defined at-rules, explicitly author-defined pseudo-classes, explicitly author-defined functions, explicitly author-defined units.",
  "media queries for containers, parent selectors",
  "Better  management",
  "Parent selector",
  "Styliser le parent d’un élément ",
  "debug, lint, etc",
  "Hope. Hope for easy CSS writing one day for 1 simple convention to bring hope for mankind",
  "Unified implementations: no more uncertainty between browsers",
  "element queries",
  "container query and a proper \"masonry\" layout capability (like CSS multi-column but items laying row by row instead of column by column)",
  "1. 往前 or 往外層的 selector，現在只有往後、往內的\n2. ",
  "Нативная вложенность и css модули",
  "wide support for trim-leading, @property, subgrid, typed OM",
  "flex-gap",
  "Seriously, styled-components changed everything for me",
  "Naming that makes sense, spring-based animations, styling select element, more consistent behaviour between browsers",
  "debugging",
  "Container queries!!!\n.container:media(min-width: 1000px) { .child { color: red; } }",
  "The ability to use auto in math functions:\nmargin: 0 max(16px, auto);\nWould allow us to center something while still having a minimum margin\n\nThe ability to trim line-heights, but this one is being worked on. Leading-trim!",
  "Cross-browser scrollbar customization; styling of <select> and <range> elements",
  "Element selector by its child. Something like this: ul < li:first-child",
  "css is a jumbled mess and I never feel that I have any idea what is going on and have very little confidence that I can get the results I want.",
  "Native nesting and mixings like SASS, etc",
  "nesting (like SCSS)",
  "* Container Queries\n* a robust Fragments system\n* (therefore) good print support\n* (therefore) Regions\n* Image Functions\n* Exclusions\n* Vertical Floats\n* Unlimited generated pseudo elements\n* stylable form controls\n* endless repeat (mirroring)\n* element() function\n* color functions\n* math functions\n* attr() function V2.0\n",
  "Element Queries (e.g. https://css-tricks.com/thoughts-media-queries-elements/)",
  "Color mods\nanimate variable values",
  "Masonry layouts. Full subgrid support. Targeting parents.",
  "Animations regarding dimensions tend to be a bit wonky or lacking entirely (eg height auto to px). I understand the difficulties though.\n\nMost of the historical problems I've ran into have been resolved with either CSS or SVG capabilities (and of course the interaction of the two).",
  "Parent selector",
  "I would like different browsers to act more standardized and expected when operating with the same CSS properties",
  "Scoping",
  "Relative/fixed position specificity. (Being able to change the relative target that a fixed item looks for.)",
  "target X number of characters, regions, exclusions, more options for outline, better form field style controls",
  "scroll snap events",
  "Nesting",
  "Browser support",
  "Equal implementations across all browsers.",
  "Constraint based layout",
  "More options to affect a element when another element has a event like focus, blur, etc..",
  "Support for sub-grid",
  "Container queries",
  "It should be a programming language. Actually it should be JS with CSS syntax and intellisense enabled. SASS ans other pre-processors should not exist anymore. CSS-in-JS is doing it but it should be possible to have a css file written in JS or CSS. It would be nice to have a Css Layout By Constraints like \"Constraint CSS: CCSS (https://gss.github.io/guides/ccss)\"",
  "parent selector modifiers depending on child class for example",
  "parent selector",
  "SASS-like nesting and namespacing (e.g. a way to avoid having to write BEM-like selectors)",
  ":has() selector",
  "Crosscompatibily in every browser",
  "Simple logic",
  "better support for css variables / conditional styles",
  "Native controls styling and cross-browser support (i.e. date input JUST LANDED IN 2020 for Webkit Nightly)",
  "a reason to exists :)",
  "Simplicity, like it used to be.",
  "Parent selector, better table element styling options",
  "Conditional logic, the ability to style a parent selector",
  "Tighter integration with webdev (e.g. css-in-js)",
  "friendly debug options within browsers / helpers",
  "make simple things easy, difficult things possible. Everything that we do Moday should be made a small bunch of one-liners and sane defaults. Then we can invent new stuff.",
  "Parent selector",
  "More general browser adoption",
  ":parent selector",
  ":has()",
  "Houdini support",
  "object queries - like media queries but relative to container size not viewport.",
  "scoping",
  "Element Queries",
  "Element queries, similar to media queries\nConstraints-based rules (similar to iOS) that can be easily adapted from design tools like Figma",
  "Vibrant community.",
  "Too much legacy features/syntax, I'd like a debloat",
  "Being able to draw custom controls (I know JS support for that is coming), Being able to program custom layout (like grid, flexbox), browsers support for the :has() pseudo selector, function to operate on colors like lighten() darken() etc., Somehow being able to polyfill CSS with JS, so that it's developing faster - similarly to what Babel did for JS",
  "teleport или div < p",
  "pointer-events: mousemoveOnly",
  "Container queries (yes, I know)",
  "Nesting",
  "Orthogonality of features",
  "Parent selectors",
  "parent selector",
  "Conditions and loops",
  "A way to more easily change a single transform property, rather than having to duplicate the entire rule - particularly useful for transitions and animations",
  "Une pseudo classe indiquant l'état sticky",
  "More control over specific system elements ( inputs, scrollbars, buttons, etc )",
  "Parent selector",
  "Too much approaches for writing CSS, should be much less as for me",
  "Element queries",
  "predictability. observability",
  "I think CSS has too much historical baggage, and makes simple things hard and unintuitive. I would like to see something come along that can use CSS underneath (i.e. compile to CSS) but that completely rethinks how styling could work and is consistent and makes sense. I would prefer that it get rid of the cascading nature (or had a way to opt-in) like most modern CSS-in-JS solutions. It would also be great if they would incorporate a constraint-based system, which can come in extremely handy in many of the types of apps I work in (dynamic web applications).",
  "parent selectors",
  "Nesting",
  "Consistent support for new color functions and subgrid.",
  "coherency",
  "Browser parity",
  "selectores ascendentes",
  "Nested CSS rules",
  "Ability to style native form elements (ie checkbox, select, radio) that currently don't allow for styling. It causes much accessibility issues as we try to adhere to designs and branding, and causes extra work and element bloat.\n\nEasier ability to vertically centre elements based on the calculated size of a parent. Without having to make everything a flexbox just to centre align it.",
  "selector to access parent element",
  "Stärkere logische Operatoren; stärkere Reduzierung auf reine Visualisierung basierend auf Semantik",
  "Element queries, Regions",
  "element queries",
  "I feel CSS is becoming more than just a \"cascading style sheet\" system.. if we ignore all the specialist frameworks and pre-processors for a moment, CSS itself has grown to the point that the actual markup structure behind a page/view/element has become less important... so as for this question, I would have to say it's missing \"clarity\".",
  "Learning resources that bridge the gap from beginner to intermediate to advanced.",
  "Container Queries, Nesting, Form Control styling abstractions",
  "loops/lists, if/else logic, and parent selectors (the opposite of `.parent > .child`)",
  "Container queries",
  "When subgrid is fully shipped it will be amazing;\n\nan inversion of `::part`, that is allowing arbitrarily deep shadow DOM content to be styled from the shadow root;\n\nDeclarative shadow root and eventually adoptedStyleSheets in declarative shadow roots;\n\nI love the recent proposal for `[custom]` for advanced styling of built-in controls (I think Salesforce is heavily involved in the proposal).",
  "leading-trim",
  "&:",
  "Font cap height (like seek capsize)\nFlex gap\nSimpler stack support (like HStack, VStack, ZStack from swift)",
  "Container queries.",
  "Native nesting, as seen in Sass",
  "A good way to style form elements.",
  "selecting previous sibling/element, nested selectors (like sass), Import statement to organize your file. (with that I would drop sass)",
  "modules",
  "Media query shorthand, more interaction types than hover, focus etc",
  "browserkompatibilität",
  ":first-parent. Select the parent of a given children. ",
  "First class support for blocking scroll on a parent without blocking scroll on a child.",
  "CSS variable support in media queries",
  "container queries ",
  "Suporte a imports JSON",
  "container queries",
  "Backward style ",
  "sass-style filters",
  "Support RTL direction, support browsers",
  "Parent selector, a non-hacky way to customize form inputs (checkboxes, etc)",
  "The cascade and how to use it for people who insist on breaking it because they can't understand it",
  "Functions like lighten/darken from Sass",
  "Outline radius.",
  "Data attributes as values",
  "* overflow-x:visible; overflow-y:auto\n* Ability to use counter values in pseudoelements' content property. (This would implement LaTeX-style \\label and \\ref.) ",
  "properties make module",
  "Being able to select the parent of an element ",
  "If CSS supported nested rules (expanded as a compiler does) and simple math (floor, ceil, etc.) it would get 95% of most CSS I write and I could skip the compiler. (I’d still need to prefix.)",
  "opérateurs logiques/conditionnels, sélectionner un parent via un enfant",
  "Knowledge of ancestor elements",
  "Sélectionner un frère précédent ou éléments précédents (contraire * + p ou n ~ n )",
  "Make it easier to debug",
  "Scoped @parent queries would make my life!",
  "Native way to do CSS modules (scoped styles?)\n",
  "variable support, dark mode and multi-theme support",
  "More ways to deal with context.",
  "Design tokens and better variable support for spacing and sizes and layout",
  "the ability to compose style definitions together",
  "better form styling control, overflow-y: auto & overflow-x: visible",
  "Nesting, parent selector, container queries, ability to style complex native HTML elements like <input type=\"date\"/>, etc.",
  "selector padre y funcionalidades para controlar el css crítico",
  "Le sélecteur du parent",
  "Sane behaviour",
  "Obviously container queries, but also focus events similar to `pointer-events: none`.\nThe ability to do something like `@media screen and min-width: var(--width){ .. }` would be cash money.",
  "Predictable behavior in all browsers",
  "https://caniuse.com/?search=%3Ahas\nand\nhttps://medium.com/microsoft-design/leading-trim-the-future-of-digital-typesetting-d082d84b202",
  "I feel as though CSS should feel more like it's connected with HTML. It's an important skill to have and I believe more engineers would be interested in paying attention to CSS if it felt more like an addition to html. An example would be targeting for very specific elements such as..\n \"div > a.theClass#theId > div:nth-child(2n + 1) {bg: dodgerblue;}\"\nimagine if it could be written as...\n<div><a.theClass#theId><div(start, pattern)> {bg: dodgerblue;}\n",
  "Nesting",
  "element queries",
  "The features of SAAS",
  ".has()",
  "Container queries",
  "css with if conditions, for example : when scroll is appearing in a div do something...",
  "parent selector",
  "accessing an element's parent\nmasonry\ntimeline animations",
  "Nested selectors e.g. div { ul { li { color: red } } }",
  "Parent selector",
  "Better all round browser support for css",
  "Element level aspect ratio that works using either width or height. If I have a video that I need to be 300px tall exactly, I would like it to maintain a 16:9 or 4:3 ratio by adjusting the width. SVG has the closest behavior to this.",
  "Currently missing: More people that know how to teach it, and the importance of using it instead of reaching for every CSS-in-JS implementation or whatever hot framework is happening right now. If you know CSS well, you can solve layout problems quickly and easily in most cases. But it's still hard to know everything because it's so big.\n\nnative css-scoping would be nice so that CSS-in-JS could just go away.",
  "accessors to the browsers computed styles such as the current size of an element so we don't have to rely on JS",
  "support for a native aspect-ratio solution",
  "CSS is missing the ability to become SCSS (SASS).",
  "mobile pseudo-elements, for example, to deactivate hover on mobile and turn it into tap action",
  "A better way to centre things",
  "parent selector",
  "Target specific browsers",
  "Functions and Math/Logic functions",
  "parent selectors",
  "Better native control of form elements",
  ":has()",
  "constraints",
  "More styling options in scrollbar and form options.",
  "Polyfills / Houdini",
  "nested sass syntax without preprocessors",
  "Either I don't know how to use vars or they're too limited. I'd like conditionals, and better ways to bootstrap JS code into my CSS to compute variable values.",
  "Vannilla Nested decelerations.\nHtml {\nHeader{\nH1{}\nDiv{}\n}\nBody{\nMain{\nH2{}\nP{}\n}\nAside{}\n}\nFooter{}\n}",
  "Scoping",
  "Container queries",
  "The ability to write functions without using a pre-processor",
  "Unlimited pseudo elements like ::before[1] ::before[2] etc.",
  "Conditions, loops, read from database",
  "parent selectors",
  "Much better Editor support for PureCSS and official mixin and import support. ",
  "Reputation. CSS has gotten the short end of the stick in the past few years. React bros seem to be driving this inline style movement.\n\nBut most importantly, container queries.",
  "Styling OS Form Controls.",
  "SASS-LIKE NESTING, like honestly. That should be the highest priority of all current work.\nBetter defaults in browsers (box-sizing: border-box, sans-serif, etc.)\nConsistency between browsers (firefox and chrome have weird \ndisagreements)\nNative sass support in browsers would be fantastic. It definitely \"won\" in terms of preprocessors.",
  "Parent Selector",
  "leading-trim Please soon, now, immediately. ",
  "International hyphenation (more of a browser issue).",
  "Nothing special. Old browsers are the real problem not the language itself.",
  "Oneline comments\nNesting",
  "A clear position system. Probably flex layout and grid layout help a lot but they must be combined, and is not clear form me when is better to use one or another.",
  "Nesting",
  "更多厲害的效果",
  "Tons of frameworks, libraries, and methodologies are available. However, I feel like there is little guidance on what is the \"correct\" way. Every project ends up with a slightly different combination of tools to accomplish the same things. Thus making learning curves more difficult.",
  "Masonry grid features",
  "all browser supports in unicorn world",
  "Element Queries (to better facilitate responsive component design)",
  "Not CSS but better browser dev tools & debugging",
  "container queries",
  "Nesting",
  "Logical absolute position",
  "1. overflow pause without having disappearing scrollbar so screen will not flicker.",
  "Easier, higher-level layout utilities and easier, higher-level animation utilities",
  "Container queries",
  "advanced animation",
  "Parent element selectors.",
  "Слишком громоздкий синтаксис и много разных свойств и значений. \nНе хватает комбинаций значение свойств (типа display: inline table;), а также стройной системы всех свойств, что помогло бы сократить их количество",
  "Obviously: Container Queries!\nSubgrid",
  "Transitions for display and other unsupported CSS properties",
  "conditional statements like if, while, etc.",
  "easier to support pages that shouldn't scroll",
  "to be able to natively interact with stylesheets from JS code. be able to receive real time data such as current base font size, and conversion of rem to px according to font size. (for example)",
  "Debugging GUIs. Either you know CSS or you don't. That is the problem. ",
  "A good solution for design system ",
  "check the parent of an element. reverse lookup",
  "browser support",
  "A browser-native CSS-in-JS-esque solution",
  "Form styling\nConditionals",
  "re-usable style blocks that isn't tied to a selector",
  "nesting (like in sass)",
  "瀏覽器側邊滾輪",
  "- native nesting (wip i believe)\n- :empty but ignoring whitespace\n- quantity queries\n- module support that uses the cascade (wip i believe)",
  "Height should work as it’s own param when using %ages not as a factor of width. Would make a lot of things easier.",
  "A width-height property",
  "Straight forward naming of properties. They're a complete mess.",
  "Container queries.",
  "* aspect ratio that can fit to available height and not only width\n* making vimeo and youtube videos work as background-videos easily, even on phones, with background-size: cover/contain possibilities\n* better styling possibilities for select tag\n* native overlay-functionality (styleable) where you can make sure only one overlay will be visible at the time and you can close on escape\n* easier styling of native html validation errors",
  "Optimized css in js.",
  "Good style control for scroll bar",
  "Нет обратного селектора ~, чтобы он работал не только вниз по иерархии, но и вверх. Исправление ошибок во флекс-боксах, исправление багов/ошибок на iOS. Зачастую некорректно работает columns, колонки переносятся не так, как ты хочешь, например в IE11. Много всего, словами не описать. Да я много чего не использую, но и не получается, надо поддерживать IE10/IE11.",
  "nested declarations "
]